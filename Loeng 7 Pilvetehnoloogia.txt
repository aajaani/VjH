 Tere tulemas 7. loengusse. Tänna alustame pilvetehnoloogideemaga. Järgmised loengud ja praktikumid hakkavad olema mõnes vaate pilvetehnoloogideemaks seotud. Me jätkame appide teemadega, et me pihamised praktikumides kasutame oma restappi raamatute halduse rakendust. Aga me nüüd hakkame seda pilves üles jadma, hiljem hakkame seda konteneeriseerima ja siis lõpupoole panemada täiesti pilve põhise rakendus. Mis kasutab ainult pilvetehnoloogid ja natuke arendame seda edasi ja hiljem teeme ka selliseks väikesteks mitmeks mikrotenuseks, et siis ei ole enam selline mono-liidne rakendus, mis jookseb vaid kasutab erinevaid pilveteenuseid. Aga täna siis tutvustame pilvetehnoloogid, et osa teist võib-olla on võtnud ka seda pilvetehnoloogia ained, nii et see tänane loengu on enam vähem, sava, midame siel pilvetehnoloogia aines, katame esimeses kolmes loengus lihtsalt selline rohkem koncentreeritud ja mitte nii sügavalt. Et mis on pilvetehnoloogia? Üks hästi hästi vana definitsioon, mis ei defineerinud pilvetehnoloogidega, rääks lihtsalt arvutesresurssides, oli üks arpaneti rajajaid Leonard Kleinrockii selline sõnastus. Arpaneti oli siis see võrg, mis eksisteeris enne interneti ja mis arenes põhimistet internetiks üle. Selle, toegi 1999. aastal oli siis praeguse seisugana arvuti võrgud alles lapsa kingades, kui nende kasvades ja kerukamaks muutudes näeme tõenalselt nii nimetatud arvuti kui komunaal teenuse levikut, kus sanase praeguse elektriatelefoni teenusega teenindavad koduside kontraid kõikjale üle riigi. Ja midas tähendab komunaal teenus see, et kasutate mingisugust teenuste, siis kuul lõpus maksate sellest. Kas ta on mahu põhine, et näiteks vastalt kasutatud elektri mahul, et maksate või ta on pigem nagu selline subscription põhin, et tänapäeval telefoni teenused väga ei ole mahu põhis, seda on lihtsalt, et maksate kindla hinna ja siis saate kindla arvud, kindla mahu teenuseid, mida selle kuul jooksul võitte kasutada, aga lõpude lõpuks iga kuul maksate enamäeva sama hinna sellest. Aga idee on siis, et saate lihtsalt subscription stiilis teenused kasutada ja maksate kuul lõpus sellende teenuste mahu või mingisuguse ette otsustatud teenuse mahu eest ja siis ise saate sellest mahus kasutada isegi kui te kogu mahtu ära ei kasuta, siis ikkagi maksata sellest. Nii et idee on siis sama, et ei peaks enam arvudusresurssid kasutamiseks, ei pea ise nagu serverid üles eadma, vaid saate lihtsalt minna teenuspakkusele ühelt, et ma tahan nii palju arvudusresursse ja siis ma, tema ütleb, et kuus maksate nii palju ja siis saate neid kasutada. Natuke modernise definition, Kartneril toon, et pilveteenusid on tehnoloogia, kus massiiliselt skaleeritavad IT-resursse, IT-teenuseid pakutateks see teenusena interetikaudu paljudele välistele klentideled. Kui meil on näiteks haapetse keskus siin instituudis, siis kas see on pilvetehnoloogia või mitte? Tegelikult on. Kui teie vaatad, et tegelikult pakutakse tudejängitele, teadlastele, et on sisemistele, klentitele nii-öelda, aga tegelikult haapetse resursid on kasutuses ka kogu Eesti vaates, et eksisteerib selline etais, veepi liides, mille kaudusavad firmad näiteks, kas või Tartu linnavalitsus tulla, ülessead oma virtuaalmasinad ja maksad Tartu ülikoli sellest, et jooksutatakse virtuaalmasinad meie instituudi haapetse keskuses. Aga põhimiselt see suurem fookus on üst, et on masillises ka eritavad, et ei ole lihtsalt mingisugune firma pakub paarile oma klendile, neid IT-teenuseid, võid pakutakse suurele hulgale välistele klentidele siis IT-ressursse teenusena. Ja mida ma mõtlen teenuse al, siin ongi see, et saab lihtsalt seda teenust kasutada ja siis hiljem saad arve ja maksad sellest. Jah, siin saad minna asuresse ja võtta. Jah, sa saad ka, et kui sa teed seda Tudengina, siis on natuke teised reeglid, et siis ei eeldatad, et Tudeng maksab sellest, võid pigem, kui sa oma Tudengi kontoga sisse logid, siis mis juhtub on, sinu, kes küsid, sinna taad näiteks, et ma soovin virtuaalmasinad, siis küsiteks sinu, kes on sinu jühendaja ja siis jühendaja peab ütlema jah, ja siis juhend jõudab jah, siis institut maksab, et see on sellised sisemised reeglid, agu sa teed näiteks kontu oma ID-kardiga. Sa tead täiesti isikliku kontu, mitte ülikoolikonto ja siis sa saad defineerid seal krediitkaard ja muud info ja saad sellest maksta. Ja ta tuleb tõenalised mingi kolm-nelikorda odavam, kui näiteks Amazonis virtuaalmasinad jooksutada. Lissalt sa ei saa kõiki neid teenused, mis on Amazonis või Arsures kättesaadavad, et põhimõtteliselt infrastructure teenuse, virtuaalmasinad saad jooksutada, kuberneetest saad jooksutada, sellist aks saad jooksutada. Ja pilve teenuseb selline väga üldine definitsioon. Minu arvatus ongi see, et lihtsalt arvutesressurside pakkumine mahu põhiste teenustena. Arvutesressursid võidad väga erinevad asjad olla. Meie räägime täna pigem virtuaalmasinatest, konteineritest, teie praktikumist kakasutate virtuaalmasinad, aga lõpude lõpuks on see üks, kõik, mille pilve teenuse pakka teilt rahakak küsima. Näiteks allatõmmatud anmed mahu eest. Kui teie seate üles virtuaalmasinas oma rakenduse, mis on näiteks pildi kaleri ja kliendid välismaalt või Eestist hakkavad teie rakendust kasutama, siis teie ei maksa ainult virtuaalmasine jooksutamisest, vaid Amazonille peate maksmakamaga iga terapaidiest, mida kliendid teie piltte allatõmbavad. Nii et selline anmed allatõmbamise hind on ka tavaliselt üleslaadimise hinda ei ole, et pilve teenuse pakku, et hea meelega võtavad teie anmed ja hakkavad teie kas küsima hoiustamise tasu või allatõmbamise tasu ja teevad sellise lõksu, et ta võid üks kõik, kui palju anmed üleslaadida, üleslaadimisest ei maksa, aga hoiustamisest hakkata maksma ja allatõmbamisest hakkata maksma. Et seal on väga erinevad need resursid, mis lõpude lõpuks võib olla maksustatavad. Aga idea on, et need saab kasutada, kui komunaal teenuste, nad sarvaselt veel elektriale kaasile mobiil paketideled te lihtsalt kuul lõpus maksate. Ja milline see täpselt see hinastamise mudel on, on hästi hästi erinev vastavalt erinevata resursidele, et ei ole, sest üks ühtselt lihtsalt mudelid, et ma maksaan minutiest või ma maksaan tunniest, teatud olukord, et sa maksate millisekunditeest või millisekund mälu alokeerimise eest või siis teatud olukorras maksate näiteks. Kõikide appi päringute eest, mis on rohkem kui üks miljon kuus näiteks ja siis hakkata iga miljoni päringu eest maksma näiteks. Nende avalike pilvede Riistvara asub seist siigesuurtes anmekeskustes. See on selled ötva, et mida suuremad anmekeskuse tehitada, seda odaavam on nagu arvutusresurside in tühiko kohta. Kui on väike anmekeskus, siis sul on vajab vähemalt ühte administraatorit, aga suunamise administraatorese võib-olla üks administraatore saab halata kaks korda rohkem resursse läbi automatiseerimise ja muude tööristad. Samut, et kui väike firma läheb ostaab hiigel suura arvu mingisuguseid serveri kettaid, siis väike firma võib-olla ostaab tuhat, aga Amazon ostaab läks miljon, et ta saab läbi selle mahu odavama hinna küsida. Suuremad anmekeskuste ehitamine on ühiko kohta odaavam, kui väikest anmekeskuste ehitamine. Aga tänapäeval anmekeskus on veel ja suured pilveteenuse pakkujate oot kohalik anmekeskuste ka koostud, et rendiivad nende, kes resursse, mida pakuvad oma klientidela. Ja klendid saavad pilveteenuses suvaalisele hetke resursse juurde küsida, niimoodi, et nende resurssidele ligi pääsemine on pikkem sekundite või minutite küsimus, et keegi ei pea kellekele e-maili saadma või telefonideel resursse juurde küsima, et kõik on läbi hapid automatiseeritav, et te saate lihtsalt oma püütan programmis kirjutada käsumis näiteks teie enda rakendusele küsiblise resursse juurde. Et kui teil mingil vaadust tekik selle jaoks. Ja pilveteenuses kasvasid välja sellistest arvutus klastritest ja kriididest, et varasemalt näiteks Tartu Ülikoolis oli arvutus klaster kusagil, kunnik arvutid, mis jöhendati üheks klastriks, kusai töid, niimoodi saab mitteida, et jooksutada mingisugusid arvutusi. Aga mingihet 90-tadatel hakkasid tekima sellist arvutus kriidid, kus mitmaorganisatsiooni sellist klastrit hakkati kokku liitma suurematest kriidid. Et kui näiteks Tartu Ülikooli teadlastel oli vaja teha mingit teadustööd, mis nõudis rohkem resursse, kui ühel ülikoolil oli, siis oli võimalik kasutada ülikoolide vahelist kriide, kus näiteks Tartu, Tallinna, Helsingi, Läti ülikoolid arvutid olid ühendatud selliseks suureks kriidid, kus igal öel oli omad klastrid, aga sai töid üleslaadidata tööde järekorda näiteks mingi pilditöötlus rakendused näiteks, kus tööd jakkagi. Tõkki, et kriidid jagati tükkideks ja näiteks tükkit jagati erinevate kriidid vahel ära, siis kriidid jagasid erinevate klastrite vahel ära ja klastrite jagasid erinevate arvutujude vahel ära ja tegisid sellised suured kriidid arvutused. Minge etk sai populaarseks, et hakkame siis välistele klientidele pakkuma teenust utiliidina, et tekisid sellise serverite rentimise keskkonade, et oli firma, kes tahtis oma PHP serverid ülesseada, siis ta ei pidand oma serverid ostma, vaid sai webi serveri lihtsalt rentida endale ja hakkas tegime niimoodi, et sai rentida webi serverid ja nendest maksta ja see oligi selline algus pilve tehnoloogiole põhimatsud. Kuigi need firmaad olid väiksed, kes seda pakkusid, et on teonud hiigel suured veel, oli võimalik seda suvalistele firmadel niimoodi lihtsalt rentima hakata. Sest mingi etk tekisid rakendused, mis olid ainult webi põhised, et kui meil oli varasemalt näiteks mingisuguna meili klient, mida ma oma süle arvutis või arvutis installeerisime, siis mingi etk hakkasid tekime selle Google meili sarnased läbi browseri kasutatavad rakendused. Enne seda oli pigem browserid lihtsalt webi lehtedavaatamiseks, aga mingi etk hakkasid kõik rakendused lihtsalt kolima browseri kaodu kasutatavateks, webi rakendusteks, webi teenusteks ja tekisid selline tarkvaratenuse na rakendused, et tänapäeval te saate Wordi kasutada oma arvutis installeerituna või saate lihtsalt Office 365 lehegilele minna Wordi kasutada läbi browseri. Tänapäeval on hästi tavaline, et kõik rakendused näiteks Slack, Slacki saate kasutada kas arvutirakenduseana või browserirakenduseana, Zoomi saate kasutada browserirakenduseana arvutirakenduseana, et tänapäeval onki hästi tavaline, et on erinevad versioonid nendest rakendustest, aga selle laale hakkasid tekkima sellised suured, globaalsed webi põhiselt rakendused, nagu Gmail oli üks nendest ja sai tästi populaarseks. Ja nende rakenduste jooksutamise jaoks oli vaja hästi palju arvutus resursse. Ja ta hakkasid tegima vajadus, et kui Gmail ja teised saad hästi populaarseks, siis miljonite inimeste serverimiseks läbi webi teenust oli vaja hästi palju arvutus resursse ja samal ajal näiteks tekisid need Amazon webi poed, kus hakkati ka myyma, koupa miljonitele, kümnetele, miljonitele klientidele ja neil oli ka vaja ehita hästi suured arvutusparkid ja Amazon leidis, et nad küll pidid ehitama hästi suure arvutus. Arvutusparkid näiteks selleks, et pühad ajal müüa raamatud, aga väljas palju pühased oli näi hästi palju arvutus resursse vabad. Öösel oli hästi palju arvutus resursse vabad. Siis nad proovisid hakkata neid välja rentima selleks, et rahateenida ja tekisid selleks esimised pilveplatformid, kus suur firmar nagu Amazon hakkasid oma arvutus resursse lihtsalt kolmandatele, klientidele asutustele siis müüma või rentima ja selleks kassasidki väljas selleks pilvetehnoloogiaplatformid. Googleil oli ka sellised igasugused veepindekseerimise klastrid ehitatud ja nendelt hakkas ka mingi hetk tekis lihtsalt mõte, et samamoodi nagu Amazon rendime ka oma arvutus resursse väljalise teenime raha nendest, kun nad hetkeljale kasutused. Siin hakkasid tekima sellised suuremahulised arvutused, siin hakkasid olema selline arvutus resursse teemahupõhinarvelta su tiilite arvutustes. Tarkkuvara teenustena siin hakkasid tekima hästi palju sellised globaalselt rakendused, mida inimesed üle maailma said kasutada läbi browserite, mis vajasid rohkemiseks back-end teenuseid, mis jookses kusagil pilves. Täname jooksud kogu loogika inimeste arvutis ja pilvede analoogis tegisid sellised suured andmekeskused, tegis selline vajadus automaatses ka leerimise ja automatiseerimise vastu, mida suuremaks sellised rakendused kasvasid. Esimised suured pilved olidki Amazon oli üks nendest 2006 aastal ja tänu nende webi poodid ja populaarse kasvule näil tekis väga suur vajadus arvutusriistvara järgi ja ne tegisid suuri klastrat selle jaoks. Ja siis mingi, et kakkasid pakkuma välja arvutusresursse ja hakkasid lihtsalt rentima virtuaalmasinaid, et sai siis Amazonist rentida virtuaalmasinaid infrastruktuuri kui teenusena. Ja põhimiselt täpselt saam moodi nagu varasemalt olid need webi serverid, mida sai oma PHP rakenduste või anmebasid jooksutamist kasutada. Amazonist saa moodi. Ja üks suuremalt vahesid oli see, et kui webi serverides valmistati ette teile selline virtuaalmasine või virtuaalkeskond, kus oli teatud PHP versioon, teatud MySQL versioon olemas, et teie saite seda asutusena natuke konfide kasutada, siis Amazon pigemandis teile kogu virtuaalmasina ja teie saite virtuaalmasina seees üks kõik mida teha. Ja saite ise installeerida, saite ise valida operatsioonisisteemi ja pigem hakkasid nagu asutuse, asutused hakkasid ise aldama need virtuaalmasinaid. Ja virtuaaliseerimine oligi selline põhi pilvetehnoloogiat võimaldav tehnoloogia, et selleks, et üldse oleks pilvetehnoloogia võimalik, pidi virtuaaliseerimine arenema piisavalt, et oleks võimalik suhtselt efektiiselt jagada üks suur server väikesteks virtuaalmasinataks ja need väikset virtuaalmasinat siis välja rentida. Meil oli vaja mingit serveri riistvara, selle peal tavaliselt oli mingisugun operatsioonisisteem ja mingi hästi lihtne Linux, selle peale mingisugune virtuaaliseeria, kes tegeleb siis virtuaalmasinata loomisega ja kui meil on siis klendid, kes soovivad teatud suurlusiga virtuaalmasinad, siis iga ühe jaksab ülesseada nagu virtuaalmasinat täpselt samuti nagu teie operatsioonisisteemid ainees näiteks tekite. Lissalt idee on, et meil on suuremad serverid ja me tekitame klendidele täpselt nii suured virtuaalmasinad, kui nema on valmis maksma nende eest ja klendid siis jooksatada oma rakendust nende sees. Miks virtuaaliseerimin on tähtis? Pilveteenus pakkuajatele, et see võimalatab pakkuda sellest isoleeritud keskkonda kasute rakendusteaks, et kui üks firma virtuaalmasin jooksab siin teise firma virtuaalmasinakõrval, et siis näil oleks täiesti oma operatsioonisisteem. Et kui operatsioonisisteemisees on mingisugune paki või võimalus nagu midagi katki teha või nagu põhimõttel hakkida, siis ei ole võimalik lihtsalt rakendustel teise virtuaalmasinaga midagi teise virtuaalmasinasees midagi katki teha. Ja virtuaalmasinast võimaldasid väga rangelt paikapa nagu palju resursse sellele virtuaalmasinale anda, kui palju mälu, kui palju ketaruumi, kui palju CPU-aega või tuumasid. Ja see võimaldas nagu pakkuda rangelt isoleeritud ja väljalõigat, nagu virtuaalmasinat mahujärgi, et kui palju mälu ja kui palju CPU-t anda siis sellele virtuaalmasinale. Ja alguses need virtuaalmasinate ja virtuaaliseerijade olnud väga efektiivset. Et tegelikult oli aeglasem jooksutada rakendusi virtuaalmasinatesees, kui ilma virtuaalmasinateta, nii et oli selline natukene efektiisem jooksutada ostse Ristvarabe rakendusi, aga tänapäeval koos pilvetehnoloogia arenguga on see virtuaaliseerimise tehnoloogia väga palju edasi liikunud, et palju efektiisem on tänapäeval kui varasemalt. Kui teie operatsioonisisteemis kasutatud virtuaalboksi, siis te ka näed, et susteda aeglased jooksevad natukene rakendusi virtuaalboksiese, aga kui te kasutaksite virtuaalboksi asemeks Senni v. KVM, siis see jookseks palju efektiivsemal. Ja tänapäeval te pigem kasutate, näiteks, VSL-i, et jooksutate virtuaalmasinat omal sülarutite peal ja tegelikult see jookseb sama efektiivselt, kui teie enda Windows. Ja teil põhimõtsed Windowsid võib ka vaadalita tänapäeval kui virtuaalmasinat, mis jooksub teie läpakal VSL-i peal või VSL-i kõrval, nii olnud, teise virtuaalmasinana. Tänapäeval kui te jooksutate VSL-iga Windowsid ja Linuxid sama aegselt, siis Linux ei jookse Windowsi see, ta jookseb Windowsi kõrval. Ja ma vaatan, kes ma midagi äraunustasin. Neid lahendusin paljusid. Tänapäeval on hästi populaarsed konteinerid, et oma korda vähendada seda vajadust, et igal virtuaalmasinalla oleks oma koop ja operatsioonisüsteemist. Sest kui te kujutad et, et meil on hästi suur riistvara ja sest riistvara peal jooksab 16 virtuaalmasinat, siis tegelikult 16 operatsioonisüsteemi koop ja jooksutamine on suhtsealt epäefektiivne. Tänapäeval kui ei ole väga ranged vajadust täielikku isoleerimesi ja oks virtuaalmasinatega, siis pigema mõistlik mitut rakendust jooksutada samas Linux operatsioonisüsteemis konteinerid. Ja siis järgmine nädal räägime pigem konteinerid, et enam konteinerid väga palju ei puuduta. Räägime sellest, et ta on lihtsalt sarane virtuaaliseerimisele, aga mitte sama ja järgmine nädal siis ma räägin täpsemal, et mis need erinevast on ja siis võib-olla saate aru, et kui erinevad need on. Mina ei nimetaks konteinerid üldse virtuaaliseerimiseks, kui ki nad on natuke sarane. Natuke sarane lähenemine. Aga virtuaaliseerimise motivatsioon oligi, et võimalikult efektiivselt pakkuda siis pilvetehnoloogia teenuseid ja üldse, et kui me virtuaalmasinat kasut, sõle võtame, et see olks efektiivne. Et kui meil Amazonis näiteks olid alakasutatud riist- või tarkvararesursid, et mõned serverid ei ole kasutatavad või mõned rakendused ainult kasutavad ära pool serveri võimsusest, siis me võime sinna samase serverisse tekitada lihtsalt kaks virtuaalmasinat ja ühe väljarentida, et saame siis neid resursse, mida hetkel ei kasutata, välja rentida siis ja lisad rahaa või lihtsalt neid riistvaraa efektiisemud kasutada. Ja virtualiseerime lihtsalt hakkakeskondade kohandamist rakenduste jaoks, et me saame iga rakenduse jaoks tekitada täpselt selle keskkonna, mis on vaja. Mondade rakendustel Windowsi, mõndade rakendustel Linuxi, erinead jaava versioonid, erinead tüütan versioonid, et me saame keskkonna valmistada ette rakendusele täpselt sellise vaja, et igas virtuaalmasinas võib täiesti erinev tarkvarajoosta erinead versioonid ja kohandada seda väga hästi. Lihtsam oli ka valmist tehtud virtuaalse keskkondi teisaldada ja taas kasutada, et me saime näiteks ette valmistada virtuaalmasina, kus oli kõik vajalik PHP ja MySQL-i jooksutamiseks ja sellest lihtsalt iga kord, kui uus virtuaalmasin vaja on, luua, et peha sellest lihtsalt koopjad. Teha virtuaalmasin valmis, mis kus kõik vajalik on olemas ja salvestada sellest snapshoti failina ja me saame nüüd sellest failist teha koopjad nii palju, kui meil vaja on, et me ei pea uuesti instaleerima, me ei pea skripti jooksutama, me saame lihtsalt selle virtuaalmasinam valmist teha ja teha sellest virtuaalmasinakettast põhimõttelselt koopja ja pärast seda teha sellest koopjast 16 koopjad, et 16 virtuaalmasinad jooksutada ja näid virtuaalmasinakoopjad on ka lihtne, et paillina teise serverisse ületösta või koopjad ülevõrgu, et saab lihtsalt saavmoodi, nagu teie koopjad teise faili, kahe masina vahel saab ka virtuaalmasinad koopjada. Ja tänapäev võib teha ka virtuaalmasinate live koopjad niimoodi, et te näiteks, et teil jooksub virtuaalmasin, te soovite selle virtuaalmasinast nüüd jooksutada selle tarkvarakaks korda suuremas virtuaalmasinas. Mis sa teha, on teha sellest ketast snapshot, teha sellest mälust snapshot, liikutada need failid ja mälukoopja teise arvutisse või näiteks suurema virtuaalmasina peale, et konfigureerida sellele kaks korda rohkem mälu, kaks korda rohkem CPU-d ja kui see on valmis ja jooksuma, siis lihtsalt switchida liiklus sellest virtuaalmasinast sellesse ja see virtuaalmasin, nagu seisuma panne, et on võimalik lihtsalt sellist live migreerimist teha, et virtuaalmasin suuremaks muuta, et see on ka HPC-s meil ja Amazonist võimalik, et saate lihtsalt oma virtuaalmasina peal parem kliki teha ja ühelt, et ma soovin suurendada näid resursse, mille peal see virtuaalmasin jooksub, et näiteks soovit oma SQL-annebaasi teha kaks korda suuremaks. Ja lihtsalt teab ka haldust, et me saame nagu arvuti riistvara välja vahetada, et kui me vahetame siin mingi riistvara komponeti välja, siis need virtuaalmasinad ei pea sellest mitte midagi teadmasest. Nendejaks on nagu riistvaraidseadmed virtualiseeritud. Nema teavad, et neil on mingi võrku kaart, nema teavad, et neil on mingi tüüpi ketas, mida nad saad kasutada, aga kui realne füüsilne ketas välja vahetadaks ja annmedes koope liigutataks üles, siis nendejaks ei muutu mitte midagi. On suustse et lihtsam siin riistvarelisi muudatusi teha või virtuaalmasinad täiesti teise riistvara peale üleliigutada, kui midagi riistvaraga juhtub, et on lihtsam, kui ei pea väga muretsema selle pärast. Te võid isega märgata, et kui te näiteks oma kodu arvutis liiga palju riistvar ära muudatus, Windows hakkab teie vastu võitlama ja teie licentsi ei ole enam palidne, et te liiga palju riistvar ära muudnud. Sellist asju pilves muidugi juhtu, aga idea on sama, et me ei pea muretsema väga sellest, kui riistvara välja asjadatakse. Ta on ka turvalisem, sest me saame eraldada rakendused suhtsevalt rangel, üksteisest pannes nad erinevtes virtuaalmasinades jooksma, sest kõik nende operatsioonis isemised anme struktuurid on erinevad. Isekõiku rakendusele õnestub kui kärnelis mingisugust mitte lubatud koodi jooksutada, siis selle koodi kaudume ei saa ligipääsu teise virtuaalmasinas oleva rakendusmäel. Kui siin rakendusele õnestub ligipääsata mingitele mäelualadele, siis need mälualad on rangemalte eraldatud üksteisest kui samas füüsilises masinas ja on võimalik kaitsta rakenduse üksteise eest. Ja kui üks rakendus hakkab tohutult palju näiteks, määlu võrku kasutamas on võimalik virtualiseerimised tasemel panna limiid, et kuid palju sellel virtuaalmasinad on lubatud võrku pännvitti kasutada. Samu asi on ka konteinerides võimalik teha, et saate limiteerida, et üks konteiner saab ainult teatud mahus võrkuliiklust ära kasutada ja siis ta ei hakkab teisi nagu ülekoorma, kui ta liiga palju võrku kasutab. Konteinerid, millest ma räägin, see järgmine nädal on kergema kaalullisemad, saab otse kasutada operatsioonisüsteemi kernelit ja meil ei ole vaja eraldi virtuaalmasinad iga konteiner jaoks, et pigem kasutatakse täpselt sama kernelid ja siis isoleeriteks kernelid tasemel kaks rakendust üksteisest ära ja ei lubata üksteise resursse kasutada, aga ei teki sinna sellest põhimaselt nende operatsioonisüsteemide kooppead ja kernelite kooppead, vaid kasutatakse üste sama Linux operatsioonisüsteemi kõigi samas ristvaras, samas arvutise oksvate konteinerid teha. Selleks kasutatakse Linux nimeruume ja muid sellised Linux kernelse sisse ei teadud võimalusi, et konteinerid üksteisest isoleerida ja see, mis on täpselt nimeruumid ja mis need tehnoloogid sille kasutused, sellest räägime konteinerite lohingus. Konteinerid on kiirem ülesseada kui virtuaalmasinad, sest me ei pea kopeerima virtuaalmasinad, me ei pea puutima virtuaalmasinad ja operatsioonisüsteemisest. See kernel juba jooks, jahe paneme lihtsalt uue protsassi samas Linuxist tööle lihtsalt kõvasti kiirem kui virtuaalmasinad ja loomina. Jõudlus võib olla lähetasem tavaservele jõudlusele, kui virtuaalmasinad ja puhul sest tegelikult ei ole sellest virtuaaliseerimise kisti ristvara ja konteineris jooksad protsassi vahel ja konteineris jooksad protsassid on lihtsalt tegelikult Linux protsassid ja näitse konteineriseerine väga palju ei mõjuta, kui just valesti ole konfigureeritud liiga vähe resurssele antud protsassile. Ja eksisteerid väga erinevat konteinerid raamistikult, ei tõenest ootet tokerid kasutanud, kuigi tänapäeval toker on pigem nagu liides konteiner-D peal, kui ta ise ei implementeeri enam konteineride loomist, vaid see on afrahritud ära konteiner-D tarkvarasse ja toker isa nagu kasutaja liides võimalt oliselt tänapäeval kui konteineriseerimise implementatsioon. Kui me kasutame siis virtuaalmasinaid, kui me kasutame konteinerid, sest suur vahe on selles, et meil on mingis künn server, meil on vaja ühte operatsioonisüsteemi selleks, et hallata nagu Riisvara-haldust. See võib-olo on natuke erinev type-1 virtualiseerimeses, kus type-1 virtualiseerija ise mängib operatsioonisüsteemi siin, et sellise lihule eraldi operatsioonisüsteemi siin ei ole vaja, et eksisterev kahta tüpvi hypervisoreid, ehk virtualiseerijaid. Kui näiteks võrtaalboxi kasutateks, siis teil on server, ningisugune Linux operatsioonisüsteem või Windows operatsioonisüsteem ja siis näiteks võrtaalbox siin. Aga näiteks KVMI puhul teil seda ei ole niimoodi, et teil ei ole eraldi operatsioonisüsteemi vaja. Ega virtuaalmasina jaoks on meil on eraldi virtuaalmasina operatsioonisüsteem ja siis iga rakenduse jaoks meil on oma koopa näiteks Java tarkvarast ja siis see meie rakendus, mis jookseb selle Java virtuaalmasinas ja mingid Java tegid on selli juures. Kui me kasutame konteenereid, siis meil on samuti server, seal peale on mingisugune Linux operatsioonisüsteem. Tavalliselt me jooksutame selleks tockerit, et hallata virtuaalmasinaid, aga tocker ei ole nagu kiht riistvara ja konteenerite vahel. Me jooksutame näiteks kahte konteenerit või ütleme, me jooksutame kuute konteenerid siin. Kaks on ühtedupi konteener, mis kasutavad kõik näiteks mingit upuntu konteener imidžit ja nelj on siin, mis kasutavad näiteks mingi Alpine, ma ei tea mingid Python imidžit ja see vahe on see, et meil ei ole iga konteener jaoks eralte operatsioonisüsteemi vaja, nad kõik jagavad seda sama Linux kernelid, neil on omal on koopi onendest tarkku arast, mis seal konteenereid peab jooksuma, näiteks kui nad vajavad Java virtuaalmasinad võib mingit Python 3.9 teekke selleks, aga see vahe on ka selles, et kui meil virtuaalmasinad iga rakenduse jaoks peaks olema oma koopi ja nendest Java teekidest, siis konteenerite puhul, nend konteenerid saavad neid teekke jagada oma vahel ja nendest ei pea olema nelja konteeneri jaoks nelj koopjat, vaid nad on niialda read only koopjat, kus tarkkvara lihtsalt loeb neid faile ja ei muuda neid failed, neid vahepeas, et konteener kiht ei tohi nagu muuta, aga ma räägin sellest, siis konteenerite luangust natuk rohkem. Et siis konteenerite puhul saab jagada operatsioonisisteemi ja saab jagada kõik neid vahepeaset faile, mida konteenerite vahele ei muudeta. Sellised üks veel definitsioon pilvetehnoloogekoht on Amerikast NISTist, mis on siis National Institute of Standards and Technology, nemad defineerivad pilvetehnoloogi mitte nagu sellise tekstilse definitsioonina vaid omaadustena, et pilvetehnoloogial, pilveplatformidel peab olema täiellik ise teenindus, peab olema laia ulatuslik interneti ligipäe, peab olema arvutusressursside koondamine, peab olema kiire lastus ja peab olema selline mõõdetav mahu põhine kasutus. Et mida siis tähendab ise teenindus on põhimist, et suvalisel ajal peab olema võimalik lendil arvutusressursse tellida, nagu isegi automatiseeritud viisil, ilma, et peaks suhtlama sellel teenuse pakkuja töötajatega. Võimest on ise teenindus, lähete ise valite, mida soovite ja tellite ja maksata nende. Ja ressurssidele saab ligi siis jooksvalt, nii et kohegu on vajasate ligi ja tünaamiliselt, et ei pea ette tellima või pea nagu kaua ootama enne, kui saada vastus. Kui te sellite mingisugust, näiteks, sellite 100 uud GPU-virtualmasinat, et saate kohe vastuseks, kas on võimalik või mitte. Võib-olla Amazon ütleb, et selles regioonis ei ole nii palju virtuaalmasinaid, virtuaalmasinate tüüppe, kus on GPU-d, et siis peab te valima mingi teise regioni, aga ta saate nagu vastusek koheselt. Te saate ka ligipäesu koheselt, ei ole kasutusel selline inimene inimest liidest, et ei pea telefoni või e-maili kasutuma. Siin on mõned agad, kui te teete uue Amazon konto näiteks oma start-upile, siis tavalselt teil on alguses limiteeritud, et teil on lubatud näiteks kuni 100 virtuaalmasinat korraga jooksutada. Selleks, et saaksid üle 100 kasutada korraga, et peate saad ma e-mailik. Et teatud asjad on ikkagi sellise inimene inimese liidesega, et teatud ästi kallid virtuaalmasinate tüübide, ei ole teile aktiveeritud või virtuaalmasinat arve ei ole teile aktiveeritud. Et see on siis kaitsta selle vastu, et kui keegi varastad näidis krediitkaart ja proovib mingi Bitcoin mainimist teha pilves, et see oleks siis limiteeritud ja oleeks ikkagi mingi sukune filter, kes ülekontrolliib, et kui mingi konto tahab kasutada hästi palju resursset, nad siis kontrollivad üle, et kas näile anda lisaresursse ja mitte. Aga pigem on kasutada selline inimene pilveplatform, ehk inimene appi või tarkvarve pilveplatform, ehk tarkvarve appi läheneemine, et te saate ise, määteks Ansible-is konfigureerid, et ma soovin uud virtuaalmasinat, mille konfiguratsioon on see ja panna selle tööle ühe Ansible käsu jooksutamisega ja kohetegib teile virtuaalmasin ja Ansible Command vastab teile näiteks siip agressiga, et kus see virtuaalmasinat siis jookseb, et saab siis ära automatiseerida uute resursside rentimise, uute resursside küsimise ja nende ümber konfigureerimise ka, et saate need kreal ajas mingi käsure ja käsuga, appi käsuga ümber konfigureerid, et mis on teie virtuaalmasina suurust, et kus see vaja oleks, et teoreetselt saaksid ise oma rakkenduse seest küsida oma rakkendusele rohkem resursse. Ja tavalsest on kasutal suhtselt suur kontrolli resurssid üle, aga see alati oleneb, millist pilvetehnoloogia mudelite kasutate, kui te rendite virtuaalmasinat, siis te saate ise valita operatsioonisisteemi, saate ise valita operatsioonisisteemi versiooni, saate ise installeerida operatsioonisisteemi sisse, mis iganeste tahate, saate täis root õiguset sinna Linux virtuaalmasinasse ja kui kokematta ümber konfigureerite võrgu konfiguratsiooni, mis keelab interneti likkus ära, siis te enam ligisle saa. Et teil on lubaga kõik katti teha võimõtsalt, kui te administreerite seda alvasti. Ja kõiki siis resurssid hankimist on võimalik automatiseerid appi kaudu. Et siis see siis defineerib selle ise teeninduse omaduse pilvetehnoloogite jaoks. Teine omadus oli laia ulatuslik ligi peas üle interneti, et need resurssid, mida te üles jätte peaks olema kasutatavad siis üle võrgu ja üks kõik kust alati on mingisugud limitatsioonid, et te saate kõik kinni pannat ei taha, et kõik oleks ligi peasatav. Aga põhjavõtsalt kõik peaks olema kasutatav, siis üle võrgu ei toeks olla vahe, et mis siiaadmattel te kasutata need resursse, kas on browser, mobiiltelefoneid või tahval arutud ja nii edasi. Ja kõik peaks olema appi kaudu juhitav ja et saaksid näiteks ligi peasu anda või keelata ligi peasu teadud regioonidest või teadud IP adressidelt üle appi, siis et saate defineerida, et nüüd peks port 80 kinni olema või nüüd peks port 80 lahti olema. Kolmas omandus ongi selline resursside koondamine, et pilved platform peaks pakkuma võimalust hästi palju resursse kasutada, et nendel on alati suur klientitarv ja tavaselt ehitatakse sinna, kus näiteks on oda elektri ind, näiteks soome, üks suuremaid super arutid on lumii, mis ei teadud soome just selleks, et ta oleks ühe elektri aama lähedal ja et ta oleks kohas, kus on hästi palju vett ja talvel hea, madal temperatuur, et oda vahe natuke jahutada. Ja kui ühest nagu anmekeskusti piisa, siis saab jagada klientirakenduse anmeid mitmed anmekeskuste vahele, et suuremalt teenust pakkada on hästi palju anmekeskuseid. Mul peakski üks pilt selle kohta olema. Järgmineomadus on kiire elastus, et idea on siis selles, et lisaks sellel, et Amazon saab müüa vastavalt vajaduse resursse, kui neil tekib vaburesurssejuurde, siis täpselt samuti teil, kui klientil peaks olema võimalik resurssejuurde võtta ja eemaldada vastavalt vajadusele, et kesed ööd, kui teil klient ei ole, siis võiks olla võimalus resursse vähendada, et siin oksutate väiksemad virtuaalmasinad, vii oksutate vähem virtuaalmasinaid ja te saaksite oma resursside kasutust ja selle ka rahakokkada, et te saaksite võimalik kasutada resursse täpselt siis, kui vaja ja siis, kui teil öösele ei ole, vaja näiteks, teil on mingisugune office rakendus, teil tööta ja töösele ei ole, et te saaksite põhimised kõik virtuaalmasinad kinni panna ja sellest siis mitte maksta, kui te öösele kasutate vähem resursse. Ja ta peaks võimaldama siis järgmineomaduse kasutada, et te teusuke hakka mõn saada, et saate kasutada vähem resursse, et te teiseks teiseks teiseks teiseks teiseks teiseks Otam derenes하하, et polvist vähem meie pas um Mrs Gold Knapp features. Ja me järrias kus teiste emalisele kasutamisele, me saasameunun huhalt manumustز verdutuni. It الأ kass stained monoma selle threatened ja schedules, ta on andis m takie ilmi toolkit kuhijunahim enuCan袋el, me ma aastudissions nebías, see on teile lihtsam tupp kus kui on näha, et korra ka tuleb hästi veel kasutada, et ei rakendust kasutama. Mida võiks siis ka näiteks Eesti riigisüsteemides rohkem kasutada, kui mingisuguse avalduste tegemise ja omikul kogu systemioks kokku, kuna inimes tootavad seda hetki, kunis avaneb. Tegel tegelikult Eestil on ka oma riigi pelv, mis võimalitab kuperneetest ja virtuaalmasineet niimoodi skaleerida. Ja teile kui klientile teoreetiliselt on olemas olete resursside maht näiliselt lõpmatu. Teie praktiku, mis näete, et see ole niimoodi, sest meie kasutame kõige matala prioriteetsema, et tasuta resursse põhimest tasures ja meie võime suusselt kiiresti jooksta mingi limiidiootsa, et selles regioonis, mida me proovime kasutada, tudenkitel enam ei ole resursse ja peate mingid regiooni switchima. Puhtel tõttel, et meie kasutame tasuta resursse, aga tasuliste resursside maht võiks näha kasutatele kui lõpmatu, et kui teil on vaja lihtsalt Amazonist 100 või 1000 virtuaalmasineet juurde küsida, siis firma jaoks see peaks olema võimalik. Et on masiiselt skaleeritavad resursid klientide jaoks. Ja viiman on siis mõõdetav mahu põhine kasutus, et kui teie kasutatad, siis pilvetenuseid, siis te peaksite saama väga konkreetse nagu tagasi side selle kohta, et kui palju teate resursse kasutan, kui palju see maks malle heb, et asutusel peaks olema võimalik siis analyysida, et kus nad kasutasid liiga palju resursse, mille eest nad täpselt maksid ja et teile oleks võimalik ette enustada, et kui nüüd jääregmine kuu tuleb viiskorda rohkem kasuta, et minu rakendust kasutame, et kas see läheb siis viiskorda rohkem maksma või kolmkorda rohkem maksma, et palju see rohkem maksma läheb. Et kõik teenused, mida te kasutatad, need pead olema täpselt mõõdetud, et kas sa olnudki siis mingi prozessori aeg, mida virtuaalmasineet kasutasid, kas on salvestusruumi maht mingis aja ühikus, mis on tüüppiliselt suhtsilt suur aja ühiked kuus, et interneti riba laius, kui paljude mingit bandwidth jäära kasutate, kui paljude kuus almeid alla tõmbate või isegi mitte teie tõmbate või teie klientid tõmbavad teie pilve kontost almeid alla. Ja tavalselt on need monitoringud, mis tegelevad just nende mahu kauntimise ja arvetetegemisega on suhtsilt keeruliselt. Ja ka erinead mudelid, mida kasutatakse hinastamisel, võivad olla suhtsilt keeruliselt. Samas te saate tavalselt ligipäesu pilve teenustele ilma ette maksuta, palju teenused on ka tasuta, et te saate näiteks mingi prototybi Amazoni või Asuresse ülesseada ilma nagu maksimata isegi ja teil on tihti sellised mingisugust väikse koodad, et te võitte kuus nii palju appi päringud teha, te võite kuus viis gigabit unmade hoidapilves, te võite kuus teatsud tunni virtuaalmasid, et jooksutada enne, kui te maksuma pead hakkama. Et tihti saab teatud teenused tasuta kasutada, näiteks Google App Engineis saab jooksutada, püütan hakkasud siis tasuta, aga nüüd võib kasutama krediitkaartid kontot teha, varasemalt sai nii sama ka kontosite ja ilmakrediitkaartita. Heroku on võimalik lihtsalt oma hobi projekte tasuta jooksutada, kui väga palju kasutust neid ei tekita, aga mõned teenused näiteks Asures static website. Mis on mõnesmõttes suhtsalt saarane kit hab website'idele? Mida? Peidses, ja. See on suhtsalt saarane, aga me vaatame seda Asures static website'iga praktikumis, paneme ka lõpuks oma raamatu, haltuse, appile front-tendi tulevikupraktikumis Asures static website üles. Ja te saate nagu kasutama hakkata ja siis pigema hakkata maksma siis, kui te reaase kliendid tulevad ja lähete üle kuoutada, siis kas kuus või päevas. Ja ei tee, nend kliendid pead saama täpse ülevaata kasutusest ja saab kontrollidei aga piirata, et te peate kliendina saama piirata, et näiteks, ku arve läheb üle mingi perioodi või mingi virtuaalmasinate kasutus läheb üle perioodis, pandakse kinnin, et selle, kei saab natuke kaitsta sellise Tenal of Service rünnete kohtad, kui kõik hakkab spämmima teie rakendust, et teie arved siis lõpmatus ei läheks. Ja väga erineva kranu naarsusega arveldas ühikult pilvas, et kunagi olid Amazoni virtuaalmasinate hinnad mingit tolaritunnis, isegi kui te jooksutasite virtuaalmasina üks minut, pidite maksuma ikkagi terve tunni eest. Tänapäevas enam nii ei ole õnneks, et nüüd on ta pike minutites ja virtuaalmasinate eest maksate võib-ale viis minutid miinimum ja siis ikka minutiest. Aga päris palju aastait oli tunnitasu miinimum, nagu Amazoni virtuaalmasinate puhul. Ja pilvefunktsioonid, millest me ka räägime ja mida me ka proovime praktikumis, nende eest te maksate millisekundites, et ku palju mitu millisekundit võtab teie püütan funksiooni käivites pilves ja siis maksate sellest. Ja sellest me räägime kahest tuleviku praktikumis, kus me räägime nanoteenustast. Lisaks on pilve teenuste platformides alati eraldatud keskkonnad, et pilve teenuse pakku, et peavad karanteerium, et kui teie rakendus savestab kui ka andmed, et teine rakendus nendele almatele ligi ei pääse. Kõik andmebaasid, kõik jooksmis keskkonad on üksteiselt eraldatud, kas virtuaalmasinate või konteineride tasemel vähemalt, tavalised virtuaalmasinate tasemel isegi ja ka andmebaasid, kui on isegi hallatud andmebaasid, siis ka seal tehaks eraldi keskkonad, et karanteerid, et teie andme teile legiks mõne teise asutuse rakenduse protsessidele. Ja te võite eeldada, et pilve teenuse pakku ja oskavad efektiisevalt resursse ära kasutada, sest kui teie, kui asutus üles jate mingit virtuaalmasinat, siis teie põhimast olete vastutav nende virtuaalmasinate halduseest, et efektiivselt väljavahetada mingit teekide versioonid näiteks, kui tulevad uued sellised või nende rabilitid välja, et mingisuguna OpenSSL teegis on mingisugune viga, siis teie olete vastutav nende halduseest. Aga kui te annate nende virtuaalmasinate halduse üle pilve teenuse pakku ettele, siis te saate tegelikult eeldada, et nemad ise uuendavad neid versioone, sest kui hiljem tekib probleem, siis teie saate neid näidada, et see oli nende viga, siis nemad on sellest vastutavad ja neil on tohutult palju klientte ja nad peavad olema efektiivset nende resursside kasutamises. Lisak nemad on need, kellel on 10 000 klientid, kes kasutavad neid virtuaalmasinait, neid resursse ja nendel on kõike parem nagu info, mille põhjal nad saavad optimeerida, et kas need ristvaralised resurssid on hästi ära efektiivselt kasutatud ja mitte. Eks neil ole motivatsioon hinda all oida, aga samas on neil ka motivatsioon, et näidatad nende resurssid kasutad kui see on efektiivselt. Nii et. Seal on teatud teatud otsused, mida teil on hiljem vaja teha. Ma räägin sellest ühes teise slide juures rohkem, aga põhimõttel, et te saate valite, kas te ise haldate virtuaalmasinait. Instaleerite siinne näiteks Python 3.9 ja oksudat oma Flask rakendust seal. Võite kasutate platform teenusena, kus pilve teenuse pakkuja ise halda virtuaalmasinait teie aaks ja teie virtuaalmasinait mitte kunagi ei näe. Miks pilve teenuse platforme või pilve teenus ei hakkatud pakkuma enne 2009-2006 aastat oligi see, et enne seda ei ehitatud väga suuri anmekeskuseid. Oli pigem väikselt firmad, kes rentisid välja virtuaalmasinait oma serverite peale ja osjid uusi serverid. Ei ole suurtma staapi, et tõesti pakkuda lõpmatu arv arvutusressurssa klientidele. Internet sai palju laiemaks põhimõttel, et kasutada pilve tehnoloogia, et peab olema võimalik, võimaldada 10-tel miljonitel klientidel üle maailma kasutada, siis virtuaalmasinait, mis jooksevad Amazoni, anmekeskustas, et lihtsalt internet pidi olema piisavalt kiire, et saaks neid tarkkuvarateenusena rakkujendusi, nagu G-Mail kasutada, kus saadatakse videoid ja pilte ükstisel edasi. Ja virtuaaliseerimise tehnoloogia pidi saama küpseks enne, kui oli võimalik virtuaaliseerimist nii kasutada. Aga olid ka ääriliselt tegurid lihtsalt enne seda ei olnud nõudlust arvutusressurssid järgi, nii suurta arvutusressurssid järgi, et pigem kasutatagi ülikoolides neid arvutusressurssid, suuri arvutusi teha näiteks simuleerimisel, aga ei olnud nagu business case selle jaoks. Ja siis tarkkura tehnuste tulekuga siis see muutus põhimõttel. Ja hästi kallis on Anne Keskus tehitamine, et see on tohutult kallis ja lihtsalt kuni tekisid suur firma nagu Google ja Amazon ja Azure ja IBM, siis teistel ei olnudki raha tehitada hiigel suuri Anne Keskused ja ei olnud vajadus kohe selle jaoks. Et pilved siis elavad ka Anne Keskustes ja globaalsete pilvedeinuste serveerimiseks on väga hästi suurt arvutusvõimsust ja eeldab siis üli suurte ja kallite Anne Keskus tehitamist, mis vajavad mitte ainult servereid, võrguk, seadmid ja ketad, vaid ka hooneid, vajavad massiivse jautussüsteemi, süsteemisid ja jaamasid, elektri, et peab olema piisavad elektrit, et see Anne Keskus ära toita nii-öelda. Google näiteks ehite sooma Anne Keskuse vanasse puidutöötlemist tehasesse selle töötud, seal oli hydroelektriaam kõrval, mis kunagi ehitete ainult selle puidu teha seaks põhimõttel. Ja siis Google sai lisaks tehasostmisega, sai ka endale hydroelektriaama põhimõttel ja said seal siis odavad elektrit ja sinna oli oda vehitada. Et need Anne Keskus tehitadeks sinna, kus on hästi odavad elektri ja jahutamine odav ja ka seal, kus on hästi palju päikest näiteks, kus saad päikse jaamase tehitada. Et siin on siis üks näite Google Anne Keskusest pelgas, et siin on siis näite päikese paneelid, et lisa odavad elektrit, toota eraldi elektrijaotuskeskus ainult sellega maja jaaks põhimõttelised. Ja siin on ka maja kõrval, on näha sellised jahutusseadmed, mis on põhimõtteliselt kõrgemad, kui maja ise ja kaks sellist maja, kus hoitakse siis serverid sees. Serverid iset avasid näovad välja sellised, et meil on lihtsalt rida haavad räkid, kus iga server on sellise sahtlina siin sees ja suur osasel üleval onki seotad siis jahutusega, mis on nende räkide peal. Anne Keskusi on täenabal hästi paljusid, et siin on näite siis Amazoni, Facebooki, Google ja Microsofti pea Anne Keskustest. Suurem osanist asuvad siis Põhja-Amerikas ja Euroopas, Aasias on mõned, Lõun-Astraaljasa mõned, aga nende ümber on tegelikult väga palju sellist väiksemad Anne Keskusi, mis lokaalselt pakuvad sellist väiksemadas mahus pilve ja Anne Keskusi teenuseid ja tihti need samad suur firmad kasutavad ka väiksemad Anne Keskusi, mis on teiste kolmaldosa pole partnerite poolt ehitatud. Ja Google on lisaks ehitanud globaalse interneti oma Anne Keskusta vahel, et neil on nagu fiber kaablid üle ookeanide ja nad ühendavad kõik Anne Keskused oma interneti, et nad saaksid seda interneti nagu ainu oma nikuna kasutada ilma, et peaks globaalselt interneti kasutamasest. Kui inimesed youtube videosid vaatavad, et võib-olla selles ka räägime, et natuke rohkem tuleikus. Ja üks mõjutekured, kus pan Anne Keskused on, kui elektrihinn näiteks, et kui Amerikas vaadata, et Idaho osa riigis on elektrihinn 10 centi, kuna seal on hydroset, see on 10 cm, see on 60 cm, et näiteks, et neid on saanud olemas. ongis elektrihinne, et kui Amerikas vaadat, et Idaho osa riigis on elektrihind 10 senti, kuna seal on hydroelektri aamad, siis Kalifornias on sustselt kallis 2,5 korda kallim ja tihti Kalifornias transportiteks elektriit kaugelt ja alati on need ülekandevõrgud piratud, et ei saa lihtsalt ehitada juurde isegi näiteks päikse paneele. Samuti Eestis on probleem ülekandevõimsusega, et ei saa tohutult palju päikse paneele ehitada, kuna võrg ei kanna seda ära, aga näiteks Hawais oleks veel utsam ehitada Anne Keskus, kuna sinna vietakse kütust kohale, selleks, et elektri aamu juoksutada, et laevadega tuvaks, LNG laevadega tuvaks kütust kohale, et kaasiga juoksutada elektri aamasid siin Hawail, et seal oleks veel nelikorda kallim elekter, et juoksutada virtuaalmasi, no, Anne Keskusi. Pige mehi teateks ega jahutuse tottu jõukete lähetale, et saada vett, kasutada, et tartus on ka krenni jahutusjaam ema ja jääres seal tigutorni juures, kus pumbatakse vett jõest ja niikau kui see vesi on kuskil alla kuue kraadi, siis pumbatakse lihtsalt teltasse ja ka täistesse keskustesse nagu vist tasku ja kasutatakse seda maja jahutamiseks, et lihtsalt võetakse jõest kuue või madalama temperatuuriga vett ja siis pumbatakse siia maja, et kui see veetemperatuur on kõrgem kui kus temperatuurine tegis suvel, siis see jahutusjaam ka jahutab seda vett enne, kui see pumbatakse siia maja, et saa moodi saab kasutada jõgede vett, et jahutada siis neid Anne Keskusi, et tegis Soomes või Amerikas. Ja see on kõvasti ota, kui lihtsalt elektrit kasutada jahutamiseks ja see haitab ka nagu balanceerid seda elektri vajadust, kuna saab kasutada sellist jõe energetpõhimiselt madalat energiet. Ja siis on naljakas, et näiteks, teltas me maksame sellest, et me paneme, me genereerime energiad veetoru, et me maksame nagu miinus energiaest, et selle eest, et me paneme energiad veetoru, me maksame, et me ei maksa energi võtmisest, me maksame energi panemisest jahutusveetorrusis. Ja Soomes ka lumisuperarut ei ehitata just selled, et sinna, et seal nodaam jahutumine ja energi. Ja pilve-Anme töötlus või no, ütleme, et Anne Keskusi kokku siis tegelikult tarpijad väga palju energet juba, et aasta energetarpimine erineate uuringute hinna, kui 2018 oli kuskil 200 teravati, 2020 oli kuskil 500 teravati ja 2020 samal ajal ainult üheksa riiki oma energetarpimisest kasutus rohkem kui 500 teravati, et pilvede hõrli nagu 10 riksis. Kuigi nüüd te võite natuke uurid, et teelasest Praeg on see kõvasti suurem, aga samas võite kuurida näiteks palju Bitcoini mainimine kasutab energet või Bitcoini nertvord küldse, et tegelikult on suhtselt sarna pilve-Anme Keskusite tarpimisele kokku, et nii palju kui see Bitcoini isekasutab. Et 2022, no tegelikult oli natuke vähem, aga 2022 oli see 200 teravati aastasest, mis oli samamist kogu Anne Keskusid 2018. Ja nüüd on see, võib ka sa kõrge malla. Aga tegelikult pilve-tehnoloogi nüüd kasutab rohkem kui Bitcoin. Kuigi Bitcoin on lihtsalt üks rakendus põhimastult. Suurime Anne Keskus paltiku, mis näb selline välja. See on siis Green Energy Data Center, mis on... Mis veel nagu väga suuri ei ole, et meil on ostukeskused, mis on suuramad. Ja selle kogu võimsus on siis 31 megawatti energi kasutust. Meie majas on Suurime Anne Keskus selline, mis on, mida olete näinud kindlasti. Tartutu ülikoolis on kaks Anne Keskusid, üks siin ja üks lochi tänavale. Tegelikult saab tohutult palju arvutusresursse rääkides ära mahutuda. See on küll väike tuba. Ei näe suur tuba välja, aga tegelikult kogu vajaduse mahutab siin ära. Meil on veel ruumi ülegi, et siia veel juurdu panna. Pilve-tehnoloogite kasutusel võtuga on ka asjad natuke muutunud rakendustarenduses. Nüüd on lihtsam, sest lihtsalt rakenduse prototüüpide ülespanna. Ja skaleerida siis, kui kasutajad jäsku tuleb. Enam ei pea nagu nii palju ette mõtlema, et palju me serverid ostame oma start-up jaaks. Võib-al mõned ostame testimiseaks, aga oma rakenduse valmis saame, siis paname pigem pilve ja siis peame mõtlema selle peale, et kas meil rahastust on, et seda skaleerida, kui ka reaalselt klendid meile tulevad. Meil peab olema mingi rahastus valmis selleks, et skaleerida, aga põhjelist me ei pea nagu ette ostma palju arvutusresursse või servereid, et skaleerida oma start-upi rakendust, kui mingisuguse ürituse tõttu aga pästi peal klendite korra aga tulemad. Kui me ehitame selle hästi, siis meil on pilves võimalik seda automaatsa skaleerida vastavalt vajadusele. Me saame ka lihtsalt, kui meil on mingisugust ajutised ülesand, et see oli suhtselt vanar rakendus, aga 280. aastal oli New York Times pidi konverteerima kõik oma artiklit PDF-formaatiat, neid arhiweerida ja nad arvutused, et neil võtakse 7 nädalat aega, et kõik oma 11 miljonit dokumenti PDF-ideks genereerida, kui nad seda oma serverite peal teevad. Aga kui nad lähevad Amazonia, võtavad korra aga kasutusse 100 virtuaalmasinad, siis sa võtasid neid 24 tundi, need said 49 korda kiiremini selle tehtud siis, kui et proovid oma serverite peal teha. Ja tegelikult ei olegi vahed, kas me kasutame kahte virtuaalmasinad 7 nädalat või 100 virtuaalmasinad, üks päev see hinn tuleb meil tõenastat sama Amazonis. Et kas me kasutame vähe virtuaalmasinad rohkem aega või palju virtuaalmasinad sama aega, et ma maksam ikkagi kokkus oma hinna. Meil on tegelikult suhtel odav teha asju kiiresti, kui meil see vajadus tekib, et me ei pea sellest rohkem maksma. Aga kui meil seda tegiksime oma serverite peal, siis me peaksime nagu serverid juurde ostma, et seda kiiremini teha, aga pilves on me lihtsalt maksame rohkem lühjaajaliselt, aga ülepikaajase tasu võib täpselt sama olla. Ja on väga tavalne, et meil on rakendused sellised, et öösel meil on vähem kasutajad, päeval on meil rohkem kasutajad ja kui me oma serverid ostame, siis me teame neid, planeerime niimoodi, et nende maksimum võimsuse palju kõrgem, kui kogu aeg need vaja on, või isegi maksimum vaja on. Aga kui me teame, et nädala keskel meil on nii palju kasutajad, siis me peame ikkagi planeerime natukele rohkem, et igaks juugs, kui tuleb rohkem kasutajad. Ja siis kogu see hall alla on tegelikult ära raisatud vajatus ja see on ka üks põhjus, miks ammas on hakkas pilveteenuseid pakkum, et saada müüa seda halli aega virtuaalmasinate välja. Aga siis pilves me saame kasutada need resursse niimoodi, et me öösel võtame resursside mahtu vähemaks, kasutame väiksemad virtuaalmasinad või kasutame vähem virtuaalmasinad või üldselt paneme teatud virtuaalmasinad kinni ja ei kasuta neid, kui vajadust ei ole. Kui me seda ei teeks, kui me kasutaks sellist lähenevist, siis meil tekivad teatud riskid. Kui me hakkame oma rakenduseks planeerima, et kuid palju meil, siis serverid vaja on, et see vajadust ärakatta, siis meil tekib näiteks üle varustamise oht. Kui me liiga palju serverid ostame ja me kunagi nii pea ära ei kasuta, siis see kogu lisaa resurssid on meil kulu, mida me ära ei kasuta, et me lihtsalt raskesime liiga palju roha ära ja me lihtsalt viskesime rahaa mineva. Või vastupidi, et kui meil on ala varustamine ja meil tegelikult kasutus on rohke, kui me vaja on, siis meil tekivad probleemid, sest mis siis juhtub, näiteks teatud aegad ja kesed päeva, meil on liiga palju klente, siis klendi kokemus hakkab halvaks minema, et sellase med nad saaksid kohemeeja rakenduseld vastuse hakkab nende päringute aeglustuma, et nad saavad poole sekundi või kahe sekundi kolme sekundi pikused vastus, et sellase med kohevastus saada. Ja siis, mis meil juhtub, me võime mõnesmõttes selle ka arvestada, et me saame siis vähem rahaa klentidelt, kui osa klente ei saa meil rakendus kasutada, aga meil on potentsiaal, et meie rakendusele oleks nii palju klente, mis tegelikult juhtub, on need klendid, kellele ei meeld, et meie rakendus on aegle lahkuma ja meie rakendust enam ei kasuta, et meie selline kasutad arv väheneb ja võib-olla ongi vastavalt meie resursside mahule, mis mõnesmõttes on okei, et me saame siis normaalse kasutakokemusega rakenduse, aga siis me kaotasime osa klente, kes meie rakendust muidu oleks kasutanud. Sest see ei ole niimoodi, et ainult nendele klentidele, kes siia halli alasse kulud, on halb kasutus mugavus, või kõigil on halb kasutus mugavus samal ajal, kui need klentid arv on kõvasti rohkem, kui meie rakendus hakkama saab. Siin muidu, kui me saame ka Riisvara juurda osta, ka selle peab aega, enne, et pilves me saame lihtsalt uue virtuaalmasine jooksutada, virtuaalmasine suuris äravahetada ja me saame näku dünaamiliselt ja elastselt vastavalt vajadusele resursse siin muuta. Ja üks asja, mida ma mainisin enne, oli ka see, et suurte anmekeskust eidamine oda on, kui väikest anmekeskust eidamine. Oli ka üks vanemuuring 2008-mis suuris, et palju maksma läks erinevate suurlust anmekeskust eidamine. Ja nemad leidsid, et kui me on keskmise suurse ka anmekeskused versus hästi suured anmekeskused, siis võrgu riistvarraostmine võib olla kuni 7 korda odavam hästi suurtas anmekeskustes saamoodi administreerimine, et kui suurtas anmekeskustes on 1000 serveri kohta, siis väiksemates võib olla 140 serveri kohta, üksad minn. Ja nende palgatasu väga erine võib-olla, et 7 korda efektiise olaks alati, et kui 7 korda efektiise olaks admin sellistes anmekeskustes. Kui ta on huvitatud, siis slideid lõpus peaks olemas viide sellel arktiklile, kui ei ole, siis küsige minu käest, et kui soovitid selle kohta rohkem teada. See on sama, mis ma jätan natuke vahele. Unne see slide vist oli juba, mul otsin seda jemaldada. Pilve tehnoloogia kasutamisel on sellist kolm ästi kõrgetasemist mudelid, mis ei ole väga tehnilised. Meil on tarkkora teenusena läheneimed, kus meil lõp kasutavad, kasutavad mingisugust veebi rakendust, mis ooksab pilves. Nemad ei näe virtual masinatest midagi. Nemad kasutavad lihtsalt neid pilverakendusi, nagi tegist Gmail või Slack üle browseri või Office 365. Ja ülejäänud kaks mudelid, mis siin on, on platformasaservice ja infrastruktusaservice, on pigem selle, aga sa tehitada neid tarkkora teenusena rakendusi. Meie koma praktikumis ehitame lõpuks, aine lõpuks, selle raamatu haldustarkkora täiesti saas teenusena ja paneme selle üles. Täna oleme pigem rääkinud infrastruktuuri kui teenusena, et me rendime põhimeselt arvudustresursi otsa välja klientidele virtuaal masinatena või konteineritena. Ja need tüüpi pilved on näiteks Amazon Elastic Cloud või VMware Cloud või Azure Cloud, et kus klientid saavad lihtsalt rentide virtuaalmasineid. Aga vahepeal on ka sellised kõrgemataaseme võimaluselt platformasaservice, mis on siis ei vaja virtuaalmasineta haldust ja selledõttu on targetitud rohkem sellist arvendat jaoks, et teie saaks seda lihtsalt püütan rakendus üleslaadida, kas teil on vajadust virtuaalmasineid halata. Et siis tekitatakse nende sanaste ja teiste teenuspakujate poolt, sellise specialiseeritud keskkonad veebi rakenduste ülesseadmiseks. Ehk üks esimesi oli Heroku, aga on ka OpenShift, mis põhimest on kuberneetes IBM selline flavor. Aga ka Cloud Foundry ja Flynn on mõned teised ja tegelikult Docker ka kasvas väljub eest platformasaservice pilve projektist. Järgmise enam peamiselt siis vaatame, kas ta platformasaserviceid. Jah, aga ei prugi. Heroku, kus hakkad hindasid võrdlema Amazoniga, Heroku on nagu kaks-kolm korda kaljim. Aga sa põhimõtteliselt sulle ei ole vaja võib-olla administraatorit. Sa võib-olla ei pea maksma alla tõmmatud andmet eest. Sul hakkavad sellised nagu erinevad hinnastamis modelid olema, et kas sa maksad Amazonile iga liigutuse eest või sa saad Heroku keskuutasu ja maksad kuutasu. Aga sa pead ikkagi arvestama, et kui sina haldad kõik optimeerid kõike võib-olla Amazoni on ta Adamkui Heroku. Aga sa tead üks ühele võrdlus, et Heroku konteiner vs. sama suur virtuaalmasin, siis Amazon tavaselt on kaks-kolm korda oda. Üks põhjas on ka see, et Heroku ei ole oma infrastruktuuri. Heroku jooksutab oma asja Amazonis virtuaalmasin. Aga see ongi põhimõtteliselt platformaservice omadus, et seda jooksutab siin infrastruktuuri peal, aga pakutakse nagu sellist mugavan platform, et sa saad lihtsalt oma püütan hakkab sa üleslaadida ja ei pea haldama virtuaalmasinad. Tarkvarateenuse ongi, et me kasutame mingit tarkvara, mis jooksab pilvees üle browseri, ei nõua klientidel mingit tarkvara installeerimist, lihtsalt läheb släki veebilehele ja hakkad kasutama seda ja teiste pilveteenuste mudelit eesmerk ongi sellised asju nagu ehitada. Üks näite on Gmail, mis Google avalikustas 2004 aastal, et pärast seda ei pidanud enam installeerima e-maili rakenduse oma arvutisse. Palju teil on e-maili arvutirakendus oma sülearvutus? Teoski käis üles. Telefonis saaks ka läbi browseris, aga siis see integratsioon ja sõnumite teavituste saad mene võib-olla nii tealseti töötat. Aga jaa, üks käsi tõusis üles. Mina isega enam väga ei kasutam, ma kikem kasutan browserist, Office-it. Nii, mõned ka kasutavad seda, et võtavad Gmaili kasutusel ja siis suunavad kõik oma outlooki e-maili Gmaili ja siis tegib mingi saasside oma vahelne selline tõmbamene ja see on ka natuke uuitu. Aga see idee tekki siis Google töötajatele, et näil jäi üle 300 Pentium 3 arvutid, pärast seda, kun nad upgradeid oma tööarvutid ja mõtlesid, milleks seda tööarvuteid hakata kasutama. Ja ehitasid sellise webi põesi e-maili klendi, et saaks browserist seda kasutama, ja kasutasid seda alguses Google'is ees, aga siis leidsid, et see oli päris hea rakendus ja hakkasid seda välja pakkuma. Tänusena väljas pool, et alguses oli see siia maanensad täiesti tasuline, aga alguses ei saanud lihtsalt kontot teha, nad hakkasid välja saadma kutseid, niimoodi, et saadsid tuhandele ajakirjanikule ja teistele kutsed ja iga kutse saaja, sai edasi saada kaks-kolm kutsed oma sõpradele ja niimoodi saakas laienema. See oli ka selled tõtted, et nad ei tahtud korra ka, nagu miljonit inimesed saad, et nad asi üleaja inimesed aru kasvaks, et see on hea selline ramped up testing, et järjest rohkem kasutajad, aga see elab üle. Ja keegi hakkasid seib e-base samal ajal müüma need kutseid, et saad 150 dollariest minu kutse endale ja siis saad ka seda proovida, et see oli selline trajal. See oli üks selline esimesi täielike tarkvaradeenuse na rakendusi. Aga tänapäeval saab lihtsalt Office 365 kvit ja kasutada, et võördi muuta või slide teha, mina ka slide dihtid on seal, aga näites, kui ma tahan slide'idel futterid muuta või teatud funksionaalsus lihtsalt ei tööta Office 365-el ja ma pean mõni kord allatõmbama, muutma ära, et suuesti üleslaudima, mis on natuke tüutu. Kuigi sisse on nähitatud ka võördi integratioonet, nagu saad lihtsalt avada selle faili ja automaatselt salvestab Office 365-e. See on lisavõimalused, et kui te teete endale Excel tabeli 365-es, kui te kasutate Excelit oma arutis, te saate makrosid kirjutada. Aga nagu Webi Excelist te saate automaatselid päesti kui teha, et kui mingisugune väärtus muutub tabelis, saada need anmed anmebaasi. Ta saada sellist asju teha, et sa saaksid isegi frontendi oma anmebaasile teha, et mis iganes te oma selles Google Sheetsis muudate, et anmebaasis muudateks nad almed ära. Et sellised automaatselt integratioone saab siis teha, mis on nagu lisavõimalused, mida nagu väga ei saa teha. No, nende makrotte põhjal te saate teha, aga nende ei saa igavaseks tööle jäeta ja nende ei ole nagu veebist kätte saadavad. Saate ka teha vastupide, et kui anmebaasis midagi muutub, et see muutub teie nagu selles Google Sheetsis ka, et te saate sellist asju nagu teha sellest. Nende on ka mõnesmõttel sellised Webi platformide elised, et saab sellised automaatselt anmeti integratioone luo sellel. Infrastruktuur teenusele sellest, ma tänal olen päris palju rääkind, on siis virtuaalmasinate ja konteeenerite rentimine üle interneti. Meie hapete sees on siis kasutusile OpenStack vabatarkkora selle jaoks. Kui teie olete mõnes aines kasutand etaisid, siis etaisi tagapeidus on OpenStack, kus etais on nagu Webi liides OpenStacki peal, mida teie OpenStacki liides te tegelikult ei näe, aga pilvetehnoloogi aines on kasutamasida OpenStacki otsa. Ja ammas on edsel kaks ongi üks nendest infrastruktuuriteenuse pakkujate. Meie praktikumis kasutavad pigem asured, kuna te saate oma ülikolekonto ka asurele ligi ja saate krediti sealt. Sealt saab kasutada kaks väikset virtuaalmasinavad või hiigel suuri virtuaalmasinavad GPU-tega, et te võite ise uurida asures, et mis on kõige kallim virtuaalmasinahind. Ja see on peameselt mõeldud ka hästi suurte ketastega virtuaalmasinata loomisega loomiseks andmebaasidega, et teil on võimalus võtta kõige kallim virtuaalmasin ja siinna panna 50 kuhus hästi kallid Webi ketast juurde, kus iga ketas võib maksta 2000 eurad kus. Ja te võite leidak, et selline kõige kallim virtuaalmasin, mida saad ehitada on ühe Betabyte ketta ruumiga virtuaalmasin, mis läheb kuskil 100-150 000 eurad kus maksma. Ja kui keegi tahab mingi hiigel suureskul ennebaasie ehitada, siis saaks Betabyte-se ennebaasie ehitada, aga see on mõnuselt kallis. Ja mis seal saab teha, seal saab monitorida oma resursse, seal saab koormust jagata virtuaalmasinata vahel, seal saab automaatsed panna virtuaalmasinat skaleerima, et kui näiteks keskmine CPU kasutus virtuaalmasinat, see on rohkem kui 60%, panna üks virtuaalmasin juurde, kui on matalam kui 10% võta üks virtuaalmasinama maha, et saab selleid automaatsed skaleerimist seal konfigureerida. Ja see on üks kõige laialdasemalt kasutata platform, isegi Euroopas kasutatakse seda rohkem kui mingit Euroopa pilvasid. Kuigi Asura vist nüüd ehitab suurt sellist Euroopaspezifilist pilve just Euroopa riikide jaoks, kus karanteeriteks, et annmed ei liigu Euroopast välja. Nüüd midagi, millest ma täna väga ei rääkinud, ongi platform, teenusena, mis ongi mõeldud sellise täis platformina veepirakenduste jaoks. Kui saate üles oma pyütoni rakenduse, mitse te peate virtuaalmasinat haldama? Sellase mitte saate minna ja küsida Amazonist või Googlilt pyüton keskkonna, öelda, et kus teie rakendus asub kitis ja teenuspakku tõmbab teie rakenduse kitis talla panab tööle ja teie maksad sellest, et ta jooksad. Teie peate võib-olla requirements-faili tekitamad, kus on kõik tegid, mis pead olla meistale eritud, aga see on ka põhimest kõik. Ja selle me käe mängimööse tulevikupraktikumis läbi, mitte veel selles nädalas, aga põhimestalt see võimaldeb siis automatiseerida kitis asuvate rakendust ülesseadmist, aga te ei pea kiti kasutamada, saate ka mänuaalsalt pushida koodi üles. Aga põhimestalt see teed pakkuse tegitab teile pyüton keskkonna ja jääva keskkonna, mis iganes keskkona, mis on vajalik webi rakenduste jaoks ja saab lihtsalt vahel jäta kogu selle virtuaalmasinatehalduse konfigureerimise paketid uuendamise, et näiteks ei peab pyüton keskkonna ise uuendama, vaid uuendadaks selle teie jaoks. See võib vähendada esialgselt kulusid, et ei pea nagu aega kulutama näiteks virtuaalmasinat ülesseadmiseks ja sellised, kui ressursside kasutus on väike, siis ta võib alvuselt odavam, aga hiljem võib palju-palju kallimaks minna eriti herokku puhul. Sinna on sisseheitatud skaleeritavus, et ei pea isegi isemõtlemat, kuidas ma panen virtuaalmasinat skaleerima, et saate lihtsalt öelda, et viimum virtuaalmasinatel konteeleerit arvan 1, maksimum 50. Ja siis vastavalt vajadusele, et skaleeriteks seda teie jaoks, et panaks saad lihtsalt keskkondi juurde ja agatakse sisse tula päringud nende keskkondadevahel ära. Et ihti on näite integreeritud teiste pilvedenuste ja anmebaasidega, et saate suhtsalt lihtsalt oma püütun koodist agat anmed hoidma näiteks Google File Storages või Google mänest SQL anmebaasis või kasutada Google loginid, selleks, et kontrollide, kas Googli kasutaan Google e-mailiga sisselogind ja mitte. Et ei piisegi tihti Google App Engineis ei piisegi tihti kasutate paroolide haldamise pärast muretsama, et kasutate lihtsalt Google kontosid ja kõik. Et saate vahel jäta püütanis sisselogimise implementeerimise põhimõtsult. Ja näited ongi, et Heroku oli üks esimesi. Google App Engine sai väga populaarseks. Me ka kasutasime seda ainetes, aga mingi hetk pandi kinni, et enam ei saanud tasutada ilma krediitkaardida kontot teha, et nüüd peab krediitkaardi kasutama. Aga saab ikkagi tasutada kasutada, lihtsalt peab krediitkaardi ka autentimete ole tunikaalne kasutaja. Ja põhimise teemaldab sellise RISD ja Tarkku raja ostmisevalimise, konfigureerimise haldamise keerukuse ja virtuaalmasinote haldamise keerukuse. Azure staatised webileid on üks näite. Ta ei ole kõige parem näite, sest seal puudub selline tünaamiline keskkond, kus te jooksutate koodi nagu püütanid või PHP koodi. Ta väga sarna neid kitha peidjidega. Et lihtsalt avaselt jooksutate seal HTML javaskripti. Mitte seige jooksutat seal või klientid tõmbavad selle alla ja jooksutavad seda oma browseris. Et ta võimaldaab sellist HTML javaskriptidelehte sit luua tasuta. Et Azure staatised webileid ei maksava midagi, sarna selt kitha peidjile, et kuna tegelikult ei ole vaja mingit serverid seal taga, siis on selline pigem frontend keskkond. Ja et asuta isiklikuks kasutamiseks, vist võite peate maksmagu te asutse, aga muidu saate ise et asutakasutada. Google App Engine on selline huvita keskkond, mis pakub täiesti valmis platformi, aesti paljude pilveteenaloogete ka integreeritud keskkondaseläks oma rakendus luua. Rakenduse on lihtne ehitada, hooltada ja skaleerida. Pole vaja ise halata servereid, toetav palju set keeli nagu pyütuni ava PHP, aga tänapäeva saab platformides tavaselt kasutatakaad Docker-konteineri, et isepalmistata keskkond. Kui te kasutate pyüton keskkondade, siis nõmad valmistavad teile pyüton keskkondette, aga kui teil on vaja mingit speciaalsed pyüton keskkond, kus on mingit pilditöötrus, teegid, mis vajavad mingit speciaalsed teeg, mida ei ole väga kerg installeerida, siis võib olla saada ise selle Dockeris üles. Ja tal on ette konfigureeritud integraatsioon teiste teenustega. See tähendab seda, et kui te soovite kasutada pyüton App Engineis üleslaadu ja pyüton akendus anme baasi, te ei pea konfigureerida anme baasi. Pea üleslaaduma anme baasi teenust, te ei pea konfigureerida anme baasi, pääsu teenuse autentimis infot, vaid te oma rakendusest importite Google anme baasi appi, hakkad seda kasutama ja taustal loodi connection nende vahel, automaalselt genereerite teile kredentialid ja põhjumast, põhjumast, see on huvita viis, et te ei pea nagu mitte midagi tegema, et näiteks Google User Authentication appid kasutada või Google Database appid kasutada, et kõik teaks nagu vett ära. Ja ta on automaalsest skaleeritav ja kui on mitu kope teie rakendusest, siis lihtsalt kasutateks ka 3. autorit selleks, et jagada sisse tuleb liiklus siis kõikide replikaatide vahel automaalselt ära, et te ei piisagi mulleksama sellest, et kuidas ma skaleerin oma rakendust, kui te ehitate Flask rakenduses, et te tegime, et Flask rakenduses on automaalsest skaleeritav ja põhjums kõik. Ja nad tekitavad teile sellise konteneriseeritud keskkonna, kus eraldatakse siis protsessid ükst esit ära, et minimaalselt sellist eraldatast pakud, et mitte nii tugev kui virtuallmasinata puhul, aga piisav tavaldat. Ja see näeb välja minupalt ilustreeritana selliselt, et teile pakutakse keskkonda, kui saate sissepanna oma rakenduse, selle rakenduse seesta saaksite hakkata näiteks otsa kasutama uuse rauf appid ilmaseda konfigureerimata, cloud file storage appid ilmaseda konfigureerimata, SQL anmebaasi ilma, et te peaksid ütlema, kus sa anmebaas asub, et need info panakse teile ette, nagu valmis ette konfigureerituks, et teie rakendus lihtsalt peab need appid importime kasutama hakkama. Ja teed teete sisse valmis oma rakenduse näiteks Pythonis, panetas selle kitti ja Google App Engineis ütlete, kus sa kitta asub, kus ta peaks koodi tõmbama ja kus selle tööle panema, ja lõpuks lihtsalt jookseb niimoodi ja iga kord, kui kittis kood muutub, siis Google App Engine saab isegi automaaltselt tõmmata selle muudetud koodi ja tõsta sinna ja pana tööle. See oli selline enne, kui sellised continuous integration and continuous deployment sai populaarseks, et pilvetenoloogid pakkusid seda nagu automaaltselt tavalsed enne hõbasada. Ja platforma sa platform teenusena nende pilve ja pilve ja muudelie elis ongi see, et ise ei pea enam halda, ma madalataseme resursse, teenuseid, virtuaalmasinaid, võrgukonfiguratsioone, palju teenused on nagu kasutamiseks valmis, ilma üles jaatmise konfigureerimete, aga see on pigenud. Google pilves asures tavaselt peab ise natukene rohkem tegema, natuke ise rohkem konfigureerima. Teenus pakku ise huolisib enam mittefunktsioonaalisete nõueteest, et kunas ka leeruda ja te saate et ihtiseda konfigureerida, aga selle minimum konfiguratsioon on olemas, et ta pakkub sellist automaaltselt tõrked aluvust, minimaalselt latentsust ja teenuse kättesaadavust. Pilveteenuse pakku elab väga hea motivatsioon teile pakkuda võimalikult väigest latentsust. Kes keegi oskab arvata miks? Kui nemad skaleerio teerakendust, siis panaks rohkem resursse üles ja teemaksete rohkem nende resurssideest. Kui nemad oiavad täistimadard latentsust, siis see vajab rohkem resursse ja teemaksete rohkem üles. Nene on mõnele võites. Nene ei ole väga nagu sellised tagas hoidlikud nende mittefunktsioonsete nõuete tagamise osas, siis see tegelikult toob näile natuke rohkem rahavõib olla. Aga põhjumõtteliselt see on kõik konfigureeritav. Herokkust ja saate ise märate, et mis on selline 95%... Mis on 5% kõike suuremalt latentsus ja ka päringute keskmine latentsus ja siis vastavalt sellele otsustada, et see on võib-sõrmiseks, et on kõik, et on võib-sõrmiseks lisada uusi konteeleerid või emaldada uusi konteeleerid, et selline 95%-i meetrik on seal. Ja see saab lihtsustada prototüibimist ja rakenduste ülesseadmisesest. On suurselt lihtna lihtsalt panna koot üles kitti seda muutajas automaatsil, seda seataks üles see näidik Google App Engineis või Azure-s teile. Ja teil on põhimõtteliselt lootust, et platformi pakkule on parimad teadmised, teenuse te targpara jooksmiseks, et nemad oskavad näid keskkondi konfigureerida ülesseada hästi, sest nad teevad seda 10 000. kasutate jaoks või vähemalt 10 000. rakenduste jaoks. Ja nemad soovivad, et võimalikult hästi efektiivselt neid resursse ära kasutada selleks, et nad põhimõtteliselt oma rahakoku hoida, aga samas neil on võib-olla motivatsioon, et neid paljusid, neil on motivatsioon, nii et täilt rahe saada, aga samas ka resursse koku hoida ja oma rahakoku hoida, mitte teie rahakoku hoida. Ja siin on üks visuoleltsioon, sellest, et kui te panete oma riistvora üles ja oma rakendus oma riistvora peal, siis te peate holitsema võrguseatmete konfiguratsiooni eest salvestusrumi ketast ostmise, serverit ostmise, mis virtualiseerimste serverite peal ja kas kasutate, mis operatsioonisisteemid seal instaleerite, mis keskonnad ülesseada, kas püütan 3.9 või 3.13, kudas hallatat anmeid, kus neid hoida anmebaasid ülesseada ja siis rakendus ülesseada. Kui te hakkate infrastruktuuriplatsformei kasutama, seda osa asju annate pilveteenuse pakkoele halatad. Nema haldavad siis servereid, salvestusrumi, kettaid, SSD'id, võrguseatmeid ja nemad saavad üles virtualiseerimise, kas on KVM või Xen või VMware või midagi muud. Operatsioonisisteeme on selline, mida te ise valite, ise hallate, ehk põhimisete saate valite, kas on CentOS 9 või U.24 ja saate ise halata kogu selle operatsioonisisteemis isu. Kuigi tihti nemad valmistavad selle baas operatsioonisisteemi koopiehetnaga, tihti saate ka ise sellega, et ta valmistada. Aga ise hallad keskondanmeid ja rakendusi. Kui te need platformi teenosine kasutate, seda annate operatsioonisisteemi hallduse ja keskonna hallduse pilveteenuse pakkoele ette valmistada, aga tihtide saate keskonda ka ise valmistada tocker konteinerina ette, et kui te ei taha nende pool valmistad, et piiton keskonda kasutada, saaksid ise piiton konteineri üles jada. See on ka senne natuke hallala, kes selle ette valmistavad. Aga see on default kasutasena, et nemad valmistavad teile ette piiton 13 näiteks. Ja kui nüüd klientid kasutavad teie rakendus, siis nemad põhimatsalt selle eest üldse ei vastuta, aga alati natuke oleneb, et näiteks Facebookis oli võimalus, et kasutajad laevad üles Facebooki sisse, et Facebooki platformi oma mängu koodi, et teistele kasutajatele lasta oma tarkvara kasutada ja selle seda kui rahaküsida. Et osad sellised platformi või sellite tarkvara teenusena võimaldavad selle tarkvara seeese jooksutada ka. Tarkvara, et see on mõnigalt selline hybridne lahetnus ka. Et näiteks IoT platformis on võimalik jooksutada anme töötlusrakendusi platformi sees konteineritena, siis ta on ka selline vahepealne, et see platform pakub ka platformase servisteenusted selle platformi sees või kõrval jooksutada rakendusi. Aga üldjuhel see ei ole võimalik. Et selline peamise teelised pilveteenuste puhul on, et me saame real ajatsressursse juurde küsida ja resursside kasutust vähendada, kas seda automatiseerida või üle appi või üle webi lide se ümber konfigureerida. Tihti puudub ette maks, et kui me teeme oma startapis, me saame kohe kasutama hakkata ja loota, et kuua jäävaks mingi raha saame. Lihtime seda niimoodi tee, aga meil mõnikur on isegi võimalus teatud prototüüpid asuta ja jooksutada, kui me reaalise klient ei ole, et kui me seda testime või esimised väikse klientid on, et siis võib-olla väga kalliks ta ei lähe. Et on lihtend asuta koodid, et saab kas virtuaalmasinaid mingi tuindide aarb näiteks 750 tuindi asures viss kasutada, kui meil on trajal akound. Meil võib olla vähem halduskoormust vastavalt sellele, millist pilvedenuse modelid me kasutame. Vähemalt ei pea riistvara haldama, me ei pea võrguseadmeid ruutereid ülesseadma, me ei pea tulemyöre ülesseadma, et teha meie serverides jookse tarkvara interjets kasutatavaks, et vähemalt selle üle me ei pea muretsama visi platformel. Teenuse puhul siis isegi rohkem, et me anname vastutuse teenuspaku äle, me ei pea sellest ise hoolitsemat jälle natukene lihtsam kasutada. Paljud kohandatud teenused on kohandatud kasutus valmis, saate minna asuresse ja küsida asuresse Postgres Anme baasi teatud suurusega ja ühe minuutin jooksele on ta kasutatav teieoks. Et te peaa uurima, et kuidas ma Postgresi hästi ülesjan Tokkar Konteineris või isegi Virtuaalmasina peal. Te ei pea isegi näende installeerimisega tegelema, et te lihtsalt ütle, et mul on vaja Virtuaalmasinud, kus on Postgres ja see seateks, et teile paar minuutik üles ongi tehtud. Tänapäeval see ole raske, et saate iseminna Tokkar Habe ja Postgres Virtuaalmasin, Postgres Konteineri võtta, vaadata, mis näid parametri peaks olema, aga te peate ise tegelikult ikkagi natuke mõtlem, et okei, mul on server, kas seal serveris on kõik konfitud, selleks, et ei tekiks mingiselt probleem, et palju file võib olla avatud, või kas ketas on piisavalt kiire, midegi sellist, et pilves saate natuke vähem selle peale mõelda. Ja lihtne on ülesseada automaatised skaleeritavust, Virtuaalmasinata puhul on natuke raskem, platformi puhul on ta üli lihtne, sest see on sisse ehitatud, et saakelib teenuse pakku ise, hoolitsib selleest. Ja te saate teenuseid viia lähemale sinna, kus teil on kasutajad, et kui teil on palju kasutajad Amerikas, saate Amerika, Anne Keskusestsele ülesseada, kui teil on palju kasutajad Euroopas, siis seate näiteks Frankfurtis ülesseada või Soomes või Rootsis ülesseada neid Virtuaalmasinat või. Et te saate oma tarkku arvasurssid lihtsasti kohale viia sinna, kus teie klientid on. Ja tihti on ka sisse ehitatud. Teenused, mis automaatised proovivad, leida, et kus teie kasutajad tulevad ja need teenused sinna ülesseada, et mõnikord teie peasugi sellest isega hoolitsema. Aga puudus on võib-olla, puudusid on sellised, et teil on nüüd jälle piiratud ligi-pääse nendel arvutusresurssidel, et kui teil on vajadus instaleerida näiteks mingisugusid AMD-speciifilise teegid või Intel-speciifiliselt teegid, et hakkas kiirendada mingisugusid pilditeötlusasju või algebra mingisugus teekide arvutusi masinapemudelete jaaks, et siis teile ei prugi lihtsalt olla ligi-pääse, et seda teha. Samas pilveteenuse pakuvad, mõnikord pakuvad teile ka täist teenust, et te saate kogu riistvara endale ja maksata rahkem sellest, et ka sellised teenuseid pakutaks. Et virtuaalmasin, kus teile on karanteeritud, et ühtegi teist virtuaalmasinad selle serveri peale jookse. Kulusid võib olla palju-palju raske mitte hindata, kui te ostate serveriste teate, ja palju selle servo maksma te läks, ja te maksad elektriest ja muud asjadeest, aga te ei saa üllatus arveid endale, et Amazon saata teile 10 000 euras arve, kuna keegist tegi teile, et te näele servistatakki teie platform, teenus on rakendusevastu ja Amazon skaleerist seda öösel kuni 100 replikaadi ja jäi tööle paariks päevaks ja hiljem tuleb hiigesur arve. Et te peate palju rohkem muretsama sellest, et palju asjad maksma teile lähevad ja te peate ettesed arvestama, mis võib olla suhtselt keeruline. Kui teil on mingisugused suured pilve kontod ja teil on asutusest hästi palju kasutajad, siis nende kasutate ligi pääsuda haldamine võib olla päris keeruline Amazonis. Et seal on väga granulaaset reeglid, et kes saab millele ligi ja kui te kasutate laanate valed õigused, kui te aanate rakendusele valed õigused ja keegi varastab teie kredentialid, nad saavad jälle mingit bitcoin mainimist teha teie pilves ja teie maksad sellest. Ja kui te ei märka seda, siis hiljem jälle saate mingi arve. Üks probleem tekib sellega, et kui te ehitate rakenduse Google App Engineisse, kus te kasutate Google sisselogimist, kus te kasutate Google SQL-i, kasutatada mingit Google monitorimist, kui lihtne on teil võtna oma püüta rakenduse ja see panna Azure-s tööle või oma serveri palj tööle, siis te peate ümber ehitama näiteks, kuidas sisselogime toimub, et enam ei saa Google Authentication logi otsa kasutada. Reaalselt tegelikult saab, et te saate mingi OAuth teegi kasutada, et samuti lupaada teatud Google kontotel teie rakenduse sisselogida ja kasutades Google Authentication 3. osapoola OAuth teenusena, aga te peate ikkagi selle osaa täiesti ümber ehitama. Teil mida rohkem te ehitate omad rakenduse pilve teenuste speciifilseks, seda suurema risk, et teil on hiljem raske, nagu lõpetada selle pilve teenuse kasutamist. Te peate osaa oma rakenduses ümber ehitama, et tegib selle vendor lock-in, kus teatud teenused on nii speciifilselt selle pilve teenuspakku jälle. Selle vältimiseks on hea ehitada konteinerite või kube näitele põhist rakendust, kus on suhtselt lihtne konteinerit tõsta ühes pilve teenuspakku teisele, et ei pea nagu nii palju asju ümber ehitama. Aga platform teenusele puhul Heroku asja ehitades või Google App Engine asja ehitades võib olla suhtselt raske nagu teise platformi liikumine hiljem, et peate päris palju ümber teha. Ja kui te kasutad pilve teenuseid, siis mis juhtub, kui keegi varastud teie kredentialid? Kuidas ta sellest hoolitsed, et neid turvalseena hoitakse eriti, kui neid konfigurereeriteks rakendustes või mingitad siia CD-pipeline'ides? Et näiteks Amazon scaniib kõike avalike GitHubi projekte ja saadab e-mailed, kui ta avastab, et keegi on Amazon kredentialid pushind üles kuhugi. Ja kõik pilve teenuse pakku, et tegelikult scanivad veebi, et leida üles, et kas keegi on kokematame, et kredentialid kuhugi pannud. Et see on väga tüüpilline, et mingi arendaja lihtsalt unustab ära, et neid kredentialid ei tohiks kuskis kootis hoida ja et neid ei tohi kuskis repositoorimise minna. Et kui need ei ole avalikus repositoorimise, siis veel, aga ka privaatses repositoorimise on tegelikult probleem, et kui näiteks kokematan, et saadatakse klendile ja siis klendi tööta ja keegi pääseb ligi ja siis lahkub töölt ja võtab kredentialid endale, et igast asi võib juhtuda. Pilve teenuseid on mõnesmattes kujunanud majanduse selgrooksest väga paljud asjad jooksavad tänapall pilves. Kui mingi hetk asures Euroopa regioonis läks, üks administraator ja kirjutas ruuterisse vale konfiguratsiooni sisse, niimoodi, et ruuter ei saanud enam interneti ühendust, siis oli mingi kuus tundi, oli teenused maas. Ja kõik, kes hoidsid oma rakendusi selles sama sanmekeskuses, nende rakendused ei ole kasutatavad. Kui nende rakendused ole ka teiste sanmekeskuste, siis nende olid kasutatavad, aga nad on nagu sellise pudelikaelad või üks kohted, mis kaidki läheb, siis võib tegelikult väga palju asju kaidki minna. Aga näiteks start-upide mingi prototüüpide loomine on palju lihtsam eriti just see skaleeritavas osa, et kui näiteks start-up saab hästi populaarseks, siis on suhtselt lihtne skaleerita seda rakendust. 10 kasute alt 1000 kasutate peale või rohkemate peale ja lihtsutab ki seda globaalsata rakenduste loomist, kus klendiid on tegelikult ülemaailmad, kui me ehitame asja üles Eesti, Teli- ja Ammekeskuses ja meil tegib tohutult palju klienti Amerikas, siis me veame ikkagi teisid eidnustpakkojad vaatama, et Amerikast, Eesti, interneti selline leitavusele atentsust tegelikult ei ole üldse hea. hea. Teie kujutad maailmas nagu üks internet, kõik on leitav, kõik on kasutatav, aga tegelikult see nii väga ei ole, võib juhtuda, et kui meie mingisuguna töötajala, läheb Amerikas konverentsile ja proovib Tartu ülikooli veebilehte ligi pääsadad, siis ta tegelikult esialgu ei saagi ligi. Et ka Googlil on endale internet võimsed lootuma anmekeskustavahel, et just vältidad seda, et nad toetavad liiga palju interneti peala. Ja pilveteenuste tulek on siis võimalda on luua väga sellised specialiseeritud ja halata, ja lihtsalt ja halatavad teenused. Te saate näiteks minna Amazoni ja vaadata palju on Amazonis pilveteenused. Neid on reaalsalt üles haja unikaalse pilveteenuse. Existeerib teenus robotid automaatseks testimiseks. Niimoodi, et teie loote roboti algoritmi, mis sõidab nagu tuas ringi ja ümber mööbli, Amazonsis leidub pilveteenus, mis genererib teile sada erinevat tuba erinevate toolid asukohtudega ja vaatab, kas teie roboti algoritmi juhab nagu üheskuhas teise, mis annab teile raporti, et mitmes genererib tuas jõudis ja mitmes jõudnud võib kui palju saajaka vettis ja saate mingi keskmise roboti kohal jõudmise haja. Et selline teenus mis genererib 3D maailmasi roboti teaks, et eksisteerib. Amazon põhimõtteliselt on ka võtnud vastu sellise otsuse, et nemad pilves implementeerid üks kõik, mis teenuse, mida klientid küsivad ja siis vaatad, kas see teenus elu jääb, kas reaalsalt klientid selle ka kasutama jäävad või mitte ja siis vihkavad minema ja unustavad sellistat ära, et selletõttu neil on ka mingid sada unikaalselt teenust. Võite ka leida mingi teenuse näiteks Amazon Data Pipelines, mis implementeerite aastalt 2010 ja ole mitte kordagi uendatud. Et lihtsalt on ära unustatud ja mingid uendusi sissele veetud. Ja nii, et on tekkiin teedite Amazoni sellise Everything As A Service, ehitate oma sellise tehase, soovite tehase panna kaamerat, et ära tuvastada mingisugust metalliobjektides defekte Amazonis eksisteerib teenusele jaoks. Miks ta eksisteerib selle? Ei tea ka, lihtsalt eksisteerib. Keegi on seda küsinud, neid, kes neid on ära implementeerind, et te panete oma kaamera ja siis panete tööle mingi aeg ta lihtsalt proovib ära õppida, mis on et objektid, mis te liinipel jooksevad ja siis ta õppib ära tuvastama erinevosi sialt. Ja siis proovib teile siis näidata, et misugustes nendes liinipel olevatel tootetel siis on mingid defektid ja mitte. Sellest nädalas praktikumis siis me hakkame asure pilve teenuseid kasutame asure staatilist webi lehted. Me midagi väga uudad selle tee. Me teeme sellise täiesti labase HTML webi lehe seal, aga tulevikus me kasutame seda edas, et teeme siin oma rakendaseaks front-tendi, aga mitte veel tänases praksis vist. Ja siis ühes praktikumi teises osas me seame oma Flask appi raamatute halduse appi asure virtuaalmasinjasi üles, niimoodi et me teeme ta internetist kätte saaduvaks, et teie rakendus saab see siis pilves jooksma üles ja saab seda port 80-pel kasutada, et saate ka endale sellise hostnamei oma appile ja saate kasutada. Aga praktikumi lõpuks pange see pilveserver kinni, et teete lihtsalt ekraani vaatad ja koodi ja annate, et me ei taham muidu seda rahakulutada, et ta vist läheb maksma kuskil 20 eurot kuus vist, et selle virtuaalmasini jooksutamiseks parem on ta jooksma mitte jätt, et me kasutame pilvega edaspidistest praktikumides ja virtuaalmasinjate asemel paneme oma appi hiljam konteineris asures üles. Ja, ja, te võite noha endaleoks kasutada, aga ärge nagu krediiterga, aga kasutakäib. Aga see ongi tänaseks kõik, kas on küsimusi? Ja asures te lihtsalt logige sisse oma ülikoolikontoga või minge asures students lähele, siis klikkig, et create an account ja siis põhimõtteliselt oma ülikoolikontoga proogi sisse logida, aga see ongi tänaseks kõik.