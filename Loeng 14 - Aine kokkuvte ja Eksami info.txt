 Tere, tulemast viimase loengusse. Tänna rääkime eksame korraldusest loengu teisel poolel. Aga loengu esimesel poolel teeme üle aime teema kokkumõtted, mis ka on selline natuke rääkises seovatus. Mis teema on, me edes tulevad sellist teema üldime ülevaardele teanistest teemadele. Varesemalte olemme rääkime terineotest mikro- ja pilvetehnoloogid arktitektuuridest. Ma kann atukene loengu alguses toon veel mõned näinud, et nende arktitektuuridest. Rääkime üle mõned mustil, aga suurem osa esimeses osasest loengu läksist teemade kokkumõttele. Siis ta vaatame üle selle eksame korralduse reeglif. Ülda etse oleme eksame korralduses muutnud võrades esimesel loenguga, kui ta on esimesel loengusmaihmise. Ja kenu üle ka näite pishimuseks, mis tegelikult on olemas kodu lähele, aina kodu lähele, nii et need midagi väga uut, sõidesemate see ole, võib-e, et neid slideid lahavad üles, saate uuesti neid vaadata, aga näite pishimuseks on kodu lähele liigult juba olemas. Aga siis iga rääkin, et millisega vastuseid mina ootame, kui ta lähe näitad mende vastamisele. Vastamises suuesti mõnda mikro- teenost arktitektuurid mustrit ja võib-e, ka natuke pilvekortekstis, et kui me ei ole juba praktikumisloonud sellise täiesti pilvepõise mikro-teenost rakenduse, ning tegelikult ei ole kõik nii komponent veel kasutmusele võttud, aga selline kütiline mikro-teenost arktitektuurine rakendus, eritellisena appis arname rakendus näed lihti välja selline, et meil on lihtsalt selline klientis. See klienti tarpvara võib olla fontaine, mis sooksad kusagi. See võib olla nii miski appi klientid, kes kasutavad meie mikro-teenostseks või appisids. Meie kontekstis me hoiame oma konteeliseltise saartilise tisuna, mis asure saartlik app service või asure saartlik application teenusel. Ja need jaavastud ja maatame kvalit, mida me siin ülespannime, et tegelikult jahaks kasutavad teile, kui me vaatame kasutlendibrands, et kasutajad ja kasutajate broussereid teaksid üle selline Content Delivery Networki käte saadale kasutavad teile. Kasutavad te broussereid, siis õmbavalt, et need jaavastud ja haata veel failid. Siis alla webist ja asurets serverid näib sellise Content Delivery Network kaudu, et võimaldades lende failid ja võimalikult kasutavad teile ja lähedalt tohumisela, et saaks pigem vilve teenust paka optimeerida, et alate ei tõma keskustseks anme hoidlast või anme keskusest, vaikse nii lähedalt kui võimalde kasutatavad. Ja siis võimalde jookseb frontend kasutajarutist ja kui kasutavad teile nupudel, siis käibid jaavastud ja jätu kasut, millega kutsutakse välja mingida appu metodid. Asures on sisseheidadud selline appi gateway, meie appid, mida me üles seame teenustele on nevad saavad, et need on hostneimid ja üle sellise keskse asure appi gateway teenuste, et hostneimile tulevad ATTP päringut suunatekses edase õigritele, containerestele, kusagil asuresees. Ahas olis me saame isekonfigureerida need appi gatewayvõi siis, kui me tekitame oma appi kusti kuberneeteses või oma serverete peal, siis tavas me saame ise oma appi gateway ülesseama. Tavasalt kasutades näite, m.g. nixit, m.g. nixit, selects või mõnudu besta arkvara, Gadji vist on kõikks näendas, need on päris palju, et selliselt appi gatewayvõi preveest proxy, et kasutadaksed, et internetest tulevad päringut, siis suunata edase õigritele teenustele. Meil on kõik sisse logimine, piltit, nagu ramadud allatõmone kõik on nagu avalik, et meil nagu enaldiselist sisse logimist ei ole vaja, et meeldam, et suvaliselt kasutavad saavad meie rakendust kasutada ramadud allatõmat ja nügega, mis võib-olla ei ole hea ja selles haines võib-olla ma tuleb, et mõtlen sellepäele põdas siia, et sisse logimine ka veel juurda panne, et me seda ramast röörida, kuidas seda mikro-teenostada asjame lehteda, aga see on üks näid asju, mida meie mikro-teenostave rakendust ei ole. Et isteme enaldiseliselt mingisuguse teenuste kalduse kihi ka, et kuidas see hallata või leida. See ei ole tihti probleem nagu pilves, kuna pilves servistis kaveri ei hallata teievalt tere, aga näiteks kui päris näete, sest tihti peab panama teenustele hoidid nimed ja siis liiklusi ja teenuste vahel märpima, et millise sisse tullama teenuste nimel linnise kontainereslikkast ümbersunat, et see pige on toimub, kui peab keskselt ja alapäe teiepol, aga kui peab reeldises natuke lisad öötega, ma sa lähen, et sa ei ole teha. Ja siis on mingisuguse päliseid mängisid teenuse, mida kasutad meie puhul on, et asura ja file storage akoundid või mingisuguse tannebaasid, et osad teenused kasutad mingi päliseid teenused. Manest teises haid, et me oleme nägisid video teenuse kasutad, et saada SMS teavite siin, siis video, aga see on aga mault väline teenus, mida mikro teenuse kasutavad, et mingit selle funksivaasut partole. Ja appi keitvi andu sinna mustered ja paneme siis väljismaaima, et meeltidu mahele ja meie mingit mikro teenuste mahele, et see kesks vahepealise kihi, kes vastutav sellest, et milliselt ja milliselt suurad, siis sa tulevad pärilid kuhu suurata. Ja see tada meie mängisid tegelikult teist pead jääta, kus asuvad mingisugused appid. Ja tegelikult väga starti teitvedi kasutamistime frontendi kirutama tegelikult kahe mikro teenuse adressi, et raamatu otsingu adressi ja raamatud halduse adressid on eraldi ULL-id, eraldi hostneemid, et meie tegelikult ei koonda seda kahti mikro teenuse, nagu üheks hostneemid väljaskutvaadates, aga näid asured asemel me saaksime teha edasi suuremised, et paneme näid oma raamatud üldise rakenduse hostneemia, siis automaaltelest suurama vastavad, misugust saavad otspuksile, et tuleb päril, et kui on raamatu toitsingu, otspuks saavad ühele appile, kui on raamatu toitsingu, otspuks saavad teisel appile, et meie appi tegelikult kasutus oli võttud, et ka koondaks nagu kõik appid ühe hostneemid ahapäitub, niimoodi, et kasutai näeks näbis oma jalastrit või Hateme rakenduses või Moabidi rakenduses, et mis suurmist appid mis nimega kasutadaks, et sa appi kaid peale aisteleks ära peita. Aga appi kaid peale on teised sellist functionalselt sisse heitadud näiteks. Amazonis saab panna kõik, mikro teenusest rääkima, JSON dokumentistruktuurid, et ta võtab vastu JSON struktuurid, aga kui me talame, et mindisugune rakendus näist mobiliis oles võimene XML saata, siis Amazonis saab ka konfigureerida, kuidas XML ja JSONi vahe konverteerime automaatsil käib, et kui on mingi vajaluse, et teatud klientid saaksid JSON asem jahe xml kasutada, nii saab appi kõik või ära peita, kes nende korbaatid automaatsi konverteerimist. Amazonis on see täärist nii kasutada liidesest ja webist konfigureeritav, et saab sellise JSON ja XML templatele uue, mis on kõik põlmiseks vajalik. Kui näites, on mingi väline klient, kes tahab liidesestada XMLi appil ja teid on appi ehitadud jahe jahe sellisele JSONi, ja siis teid teada, kuud uud appi teidama hakkamäe saate, et Amazoni appi kõik või tasemel muudatud juba teha. Siin on teelüks samas kui inti senne visulatsioon, et meil võib olla ka mingi speciaalne metod, me tahame, et kasutaja saaks välja kutsuda mingi appi metode, jahe sellise suurema funksionaalsude mingisubuse tootostmine. Aga tootostmiseks on väga välja kutsuda kolme teenust jälestud, kui servisaal, servis V ja servis C, aga me ei taha, et kolme teenust kutsuks välja kasutaja HTML lähelt või JavaScript või mobiirakenduses, ja me ei taha, et kasutajad teabseks kolme erinead mikrotelist, et siis appi peete tasemel saab ka teha see mikrotelist väljakutsuda apprepetioona, et defineerid, et kui tuleb jätud otspultile päril, siis kõigevalt kutsutaväile mikrotelis A, siis mikrotelis B, mikrotelis C ja P ära, et niimoodi käividataks kolme mikrotelis kasutajad, et kasutan näed, et see kutsutaväile ühe metodi, aga siselnud seal kutsutakse väljakutse kolme erinead metodikustuse järele, et kui kõik on edukad ja ühtekerrad, et ei tule, et siis viimase ja teenuse väljakutse ja väljumpäe tagas kasutale saab ka teha sellist mikrotelist aga kaotareid, et defineerida logite, et mis järekoreid ja mindiselt nekrotelist tuleb väljakutsuda. Sõna saab teistmoodi ühe teha, et me saaksime teha lihtsalt ühe mikrotelise, mis oma korda leid kolme mikrotelist väljakutselud, aga mõnigult on parem, kui me saame sellist väljakutselolgiturt defineerida pilved asemel, niimoodi et me ei pea oma tarkvara selle, aga selle läks loom hakkama, et asures on ka selleks eraldi logic apps ja Amazonis on eraldi step functions, kus ka saab seda pilved aseme defineerida, aga mõnigult tehaks seda ka appi kõitveid teenusest otsenud. Üks asi, mida me ka me ei ole selles aeges vaatanud, on selline eriti kuperneetises kasutuses olev selline vuster, mis on kõrval kärv või sidecar indiskeeles, kust me loomme kuperneetise konteinerime poodid ja me loomme oma sellise logika või pisas logika konteinerisime sisse, mis näiteks implementeeri midja. Aga siis tegi pajaadus, et me sooviksime mingid lisadvuksinaasust sinna mikrodenduses juurde panne. Me soovime, et automaatselt tõmataks alla mingid konfiguraatsiooni failid või uue koodid kustki kitis ja automaatselt muudetaks mingid faili systemis, kus me ei ole rakennus osub. Meist tegib küsimude, et kuidas sa implementeerida. Kas me peame, et see koodi muutma, et koodi akaks ise pollima kusaköötafaili või ta ainult teedab, et ta saab meil faili lugega ketta, ja me paleme selle kuperneetisest poodidisse kõrval konteineri, mille üleks on ongi kusaköötafaili poolida mingid muudatusi ja uueldada leid faili systemis ilma, et me peaksime konteinerile või pood, miden aga restarti tegema. Ja siis ongi võimalik, kui peame teise konteineri kõrvale panne teised konteineri ja implementeerida mingisugust kisafoksionaalist. Siin on näiteks logifailide puugi saatmine, võrgu võenduste kripteerimine, sertifikaatide haldus. Kõik sellist asju saan panna meie mikrotenusiste mitte, koha nii muudas või lisakonteinerite lisamseva, kelle on õigus samat failisest feeminaga muuta. Ja näiteks meie teenus teed endale restarti, või vaatame meid sertifikaadiofaila, näiteks kledi sertifikaadiofaila kuske kaustas. Ja siis on kõrval teene konteiner, mis valmista vette ja või tõukab meid uusi kledi sertifikaadiofail alla iga natk saadaga. Kas siis põks seda suhi programmiseed, aga et me ei hoia asju mälus väga pikkad, sest muidumelt midu päeval võib olla võib olema? Ja, sellised juul jaht tõest, et me ei toivse sellise juul, nagu hoilda asju mälus, ja me ei toivse sellise juul võib pole kai eeldada, et kegid, et meil restarti iga natk saadaga, poid pigem meie parkorop peats olema võimelne refreshida mindi kausta näiteks. Ja tiftis aga on, et meil on näiteks mingisugune kledi sertifikaadiofailide kaust ja meie rakendus, siis lissalt refreshimsta kaust ja vaatab, et see saa eksisteerid ja ta ei eelda, et tal on nagu jooks mis ajal mällu loedad kaustusisu ja siis ta ei nõud märvust vaatab, et see paail eksisteerid on nüüd. Ja tiftis ja takasutavad ka niimoodi, et paljas saikas ja välise tühenduse ja mikrotenuse vahele, niimoodi, et mikrotenuseid ei pea välis ta tühenduseks mitte midagi. Tema näiteks kuulab sisse tulevad välikult mingi porti peal, aga mingi teine kõrval, pärud, konteiner, sest koolitsib sellest kõrvas krypteeride sisse tulevad tühenduse ja saab kripteerimise panna ka kõrval konteineri halata. See on siis service mesh list kui paneele keses kasutuse. Ja miks see nagu hea on, on see, me saame oma sellise konteineri Tarkvara demoa lihtsama ja meid kõrval kärvud tihti ole Tarkvara, mida meie entame, vaid see on iga kindist avatud lähtekooliga projekteid, miski sest võtta. Et me tõstame üle, et Tarkvara, mis oskab setil kaatavalat, me võtame Tarkvara, mis oskab logifile huumi saata, me võtame Tarkvara, mis oskab kitist pollida ja need komponenteid tihti tulevad kiin juba valmis oltate box lahendustes, mida saab sinna kõrval list panna ja installida ja siis meie ei oma mikro teneest midagi implementeerida tälle. Aga atuke seda tuleb arvestada, et meie mikro teneest on paru saama, et vahepeal ei tuleb võib-olla mida, keda põstada. Meie ka kasutasime suuresti selles ainest lähenev, et kui me jagasime mikro teneest kaheks, siis neid kaks mikro teneest kasutasid sama anduas. Selle ka väite oht, et kui näite üks mikro teneest midagi muudab ja teine mikro teneest on sama lajal ka midagi muudab, et neid ei ole väga isale eeritud, kuna nad mõjutaad üks teste läbi selle hanmebasis struktuur. On kui küsimist, kas igal mikro teneest on oma hanmebasis ja tema on ainult, kes on vastutan näiteks raamatulte failide haltuse eest. Ja ükski teine otsa hanmebasis raamatult sisu ei muuda, raamatulte list ei muuda ja kui on vaja raamatult alatamata, siis neid küsimid eesemikro teneest ja kõik raamat. See on üks polnus ülesne liimas praktiutumist, mis me natuke muudime, et enam ei oleks raamat otsinud, kui mikro teneest lõigust otsa hanmebasis raamatulid võtta, vaid ja teha küsima üle appi teised mikro teneest, et anna mulle raamatul sisu ja tema anna küsimist raamatulidee või anna mulle raamatult nimekiri. Ja siis me peame ainult ikkuna teereme jõuja mikro teneest ja see, et kuidas hanmebasis raamatulida nimeküia saada, kuidas raamatul sisu saada. Ja siis on see äri loogika täiesti eraldatud, et me ei pea ikkuna teereme siin mitu kord, et kui ma muudame ümber kosmust, asure file storage ase, me katsutaan mingi teist hanmebasi, siis me peame kõikki teist mikro teneest seda muudma, et kuidas raamatulide failiast käette saada. Ja siis on see loogika parem nii eraldatud, aga mõnikõttel lihtsam enitada appisid ja niimoodi, et me annan õigused, et mitme mikro teneest saada hanmebasi lugevad, siis nad ei ole hea, mida jõu üle võrkul oma vahel pärinud tegema, et saad otsa hanmebast asju vaadata, et mõnikõttel see on vajalik ikkagi, et me jagame hanmebast, mitme mikro teneest ohjadud. See on kõikki teist, et see, mis aal on, on oma hanmebast, see, mis tead oma hanmebast, aga see on lihtsam see, et teed hea, et tead hea, aga me annan õigused. Ja siis nad saad kiireli andatada ühe. Ligi, ja see on kadulik siis, kui on väga keerukad, täikest mingi pärinud, mida TNC ja TNC teevad, et siis ei ole ka hea, et igakoltu TNC jooksevad, on vajaga TNC pärinud teha, ja järgituse on viitum pärinud, meil on vahel pärinud teha, on ikka võib palju pärinud, et me ei tee ülega kaasa võrfu liiga palju pärinud, et siis annan mõlema ligipäe su sama hanmebastile. Võib-pal on siis hea, kui ainult üks näites kirutab ja aga mõlemad poemaatud, et vähem konflikte tegid. Ja me võime ka sellist mikro teneest ja näile kutsus, aga keerist vaadata kaad kahel viisile, kui meil on näiteks mingisugune teenus, mis tead väljakutsuma, võib-pal saab palju selgiks. Nüüd see on meil mingisugune teenus, kes loob uue kasutaja. Kasutaja loomise on vaja võib-pal aga teistest kolmest teenusid ei olegi muundud. Näiteks, kui me loome kasutaja, siis see kasutaja loomise teenus, siis ütleb väljate point 7 sile, et tuleks looa mingisugune baas, konto, 5000 punktiga uuele kasut. Või siis, et tuleks saata kasutajale sunum. Ja et tuleks ka veel, ja et tuleks ka kasutajale sunum saata e-mailideid, ja siis tuleks ka mingisugune post, näiteks mingisugune väike näite product saata ka kasutala kojuet tervituseks, et me saadaan mingisugune komite ütleks sellist ma ei tea, mis seal on, aga. Aga siis on see teenus, kasutajat loomise teenus nüüd vastutab kõige sellest, et tema päris väile kutsuma need asjad, ja siis tegib see probleeme, et see on väga sõltu. Mis toimub siis, kui näiteks loyalty point sellise maas, kas me saada kasutajat looa? Kui failid, näiteks selle loyalty point teenusele pärin, kui saad mene, mida ma peaksin kasutajal loomidele tegema? Kas kui tegib pausile panema, kas seda mitte tegema, et kui ta sõltub sellist asjad, et ta peaks välja kutsuma midagi, et kas me saame lootsa, kas me saame siis eeldat, et kasutajal loomine õnnestus, kui me ei õnnestud, näiteks loyalty point service teenuset väljakutsu. Ja selline orkesteerilne, kus üks teenus on vastutav, et ta kutsub mingis järgiselt teenuset väljateeg, mingiselt tegevusi, et see tegitab, kas just pudelik aalata, tegitab äga suuret sõltus mendevaal. Mõnesmõttes on võimalik tegelikult kasutada pigem koregraafia lähene, mis orkesteerilja tööte kultud, et meil on või orkestaator, bändi ees, kes kõigil näitab, mida teha, koregraafia on pigem see, et meil on nelid tansijad ja nad ise tansivad ja keegi juhi näid keskselt, et on pigem hajutatud juhtimine, kus orkesteeril on üks orkesteerilja, kes juhi mingiselt tegevusi koregraafia, nad pigem tansijad isel eevaad midagi. Ja mikro tehnosta maailmast on see, et me loome kasutaja ja me loome kas sõnmuse, näiteks kuski rääbitiselt, loodi uus kasutajal. Ja me paneme need teisele kolm teeluseid lihtsalt kuulaama need sõnmuseid. Ja nad ise otsustavad, et kui midagi teha, kui on uue kasutajal loomise sõnmus. Ja nüüd enam, nagu see kasutaja loomise sõnmus, teelusei peab üksse teada, mida peaks veel tegema kasutajaloomisel, kas peaks mingi tiimeli saab maailmite, kas peaks midagi muutma, lõveliitipoints tehnost oli mitte. Tema lihtsalt loob kasutaja ja tegiselt sõnmuse uus kasutajaloogi. Ja kes igares ole huvitatud selle sõnmuse, ta kuulatast nad uutni sõnmusi kas olul, see kas siin andre, vaid siis sõnumite järegulisemõal. Ja sellega me ei enam, ei teha see tehnost teadma, mis ju toimub pärast kasutajal loomist kui lega muuja. Ja see vähendab ka sellist, nagu onse kahe teeluste vahelist suhtkuse vajadust ja ka seda, okei, see oli maastunud seda uuen, et kasumub kas see teeluste taks uuesti mida korda, mitte korda ta täht seda kordama, kas ta peaks seda kordama jääma, nii on ei edasi. Et mõnikord on parem selle tõttu tegitada nagu tööde järekorralt või sõnumite järekorralt ja tegitada sellised sõnmused, kus sa sõnmusted asemist defineerid, et teadad sõnmuste, kuhul peaks ningid operatsioone veel välja kutsma. Ja see vähendab sa sõltuvust nendel, näida mikroteenuse oma vahelist sõltuvust. Ja võib-alas siis siin tuleb defineerid, et siin jääb see sõnmus alles, kuni teadud stüntid, kliendid on seda sõnumit välja kuulanud, kui vägidi seda teha, me võtame seda sõnmus ja tekitame kolm järekorda, näiteks FANAS, XENG ja ABIL ja nendes kolm järekorda jääb sõnmusta alles, kuni üks kliend vähemalt tuleb ja kuulad, et võtab neid ära. Me saame seda järekorda alles jätta igavesti, kuni reaalse tuleb ja keegi seda sõnmus tööte matkad. Me saame karanteerida selliselt sõnmuste kohele toeneutalist. Ja tulevõib, et sa andra kolme järekorda asumud, et näid sõnmuste sõttuvad. Ja selled on tõetud istiga mikroteenosta vahel kasutadeks näid tööd ja järekordud, agi sõnumit järekordase teenusele, et tead nii otsa sõntuvust ja neid mikroteenuste vahel. Mõneb ka rakke, kui sa näid, et siin on üks õppsele ästi tüümpiline abstraktne mikroteenuste näide, et ei ole nagu päris näide, et siin on ka kasutatud näideks kahva sõnmuste järekordasid. Defineerida eventid, et kui näid, et ma mõtlen, kus see algus võib sa oled, kasutada näideks. Kui sa oled, mida nii on shopping karti ja hakkab ostma, et soovib osta, ja siis restaabi vaat kuuluda saab sõnmuse, et siin on ka kahtatud, et sõnmuse, et shopping kart on nüüd valmis ja pärutav valjendat pae nupu. Ja siis ordeplasement teenus hakkab välja kutsuma meedlada, et miks on vaja teha, et kontrolliv inventorist kas üldse on neid aiteleid, mida ostasab taha. Kui kõik on olemas, siis saadab pärin kui payment meenus, et kontrollide kas payment läheb läbi. Ja samasajast kui õnestub siis inventori kontrolli ja payment läbi, ja siis ta tekitab, et uus ostmine on nüüd tekitad. Te kirutab amme baasi, et salastada küsivalt, et on ostetud midagi, ja ka tekitab sõnmuse, et üks ostmine on nüüd tekinud, et nüüd tulaks ostmidele sealt ataisa läbi teha. Aga siia amme ka kirutub, et see oli edukas ja ostmine on algraportutud. Aga samas tekitab ka ilendi. Ja siis teise teenuse, kes saavad teada, kes saavad mingiselt tegeluse teha, talas seda, kuus ostmine on edukas, näib, et shipping teenus kuulab neid sõnmud siia, kuulab, kõste peaks tehti teha uue kohale vahvetamise. Reporting teenuse on ka sinna tulata, et kui on uus ostmise event, siis ta ka võib-al ta mingis reporting amme baasi ka kirja panne, et kuna sa ostmine on toimus. Ja inventori ka võib-al ta ei tekitab mingiselt eventid, et siit tuleb inventorid ostmine toimus, tema võtab nüüd aitelemita, mis saadas inventorist maha, võib-al ka publisseerid, et siin on nüüd on vähem aitepeid, või näites aitemeid enam ei ole, ja siis on mingiselt teellimiste event tekitutakse, kus nile kolmandas osapooled peaks need aitemeid juurda teelime hinnat. Ja siin on see näite, et kuidas me saame osa asju teha aasumkronse taustale. Teetud asju me tahanu koha teha, me tahanu kasutelva asjate, et ostmine on edukas, aga teetud asja võib-al toimusab pärast poole, nagu et see on teha koha ütlema, et nüüd keegi hakkas sinu asju koku panema ja teelimust läbi liima. Sellest, et see võib toime teed, et see võib toime teed, et nädal aapärast, et teatud tüutmus ilmuseks, sa ei tea nagu koha ärava, nagu vastama klientid, et klentsapõib võib hiljem. Shipping teeluse käest, siin mitte kolmanda oda poolt, te kaulutuu, klentsapõib võib tead, et temal on aga poos, et seda kohal toivad. Uuperi näite on ka siin, et siin on ühtav arktikel, kus on kolm, neliselist hästi võialiku näite, et kui suure tasut seda on mikropeastel üle, nii läinud. Uuperil kunagi oli selline monolit, seda kunstalt juba uuedaholist monolit, kunandal oli palju väliste teenustele, sest adaptorid monolit sees, kas monolit on sellist viik loovika ja siis on nii teelat adaptorid, mis suudstas väliste teenustele, aga seda neid oli raske skaleerida miljonitel ja niljonitel sõitudele, et korralikult partitsioneerida andme, et näite paljuda monolit replikete valjel ära. Et see on läksid üle mikropeenuste peale, aga kui nad läksid suhtsalt vanamamu, siis selle laali on väga mikropeenuste standardeid, kuidas lua hästi mikropeenuseid. Ja siis neil tegis senne olukord, et neid olid tõesti tuhandeid mikropeenuseid ja nad proovist näiteks visualiseerida mikropeenustu vaheles suhtlust. Ja oligi tekkis nii palju legasi mikropeenuste, et tehti uued versionid mikropeenustest sinna mikropeenuste võrku ja see arvitektuur läks nii käest ära, et nad ei saanud enam visualiseerida, mis nüüd see jooksab, kui sa aga serveritse ja kuidakata oma vaja suhtedavad. Aga siis nad hakkasid standardiseerima, nad ise oli ka osaliselt nende mikropeenuste standardiseerimis lähenemistese, kuidas paremini monitoride, kuidas paremini aru saada, kuidas hästi mikropeenuste töötavad. Kui me loome alternatiivse mikropeenuste, et kuidas arusada, kas see mikropeenuste parandab neil olukord ja võitte, siis agati väga rangaist mõõntma mikropeenuste meitlikõi näiteks. Rikki talvus, dokumentatsioomi, tase, hõutus, stabiilsus, eskaleeritavus. Ja kui niisid arengustiimid tegid uuega tõst mikropeenuste, siis nad nõõtsid, kas uus mikropeenus, kui ta töölepana, et see näedab, et kas ta parandab mindist mõetlik, et kas ta reaalselt ka midagi paranaks tegi või siis teib kogu arvitektuurikeerujasemaks. Ja mikropeenuste uuega, siis siis pididki rangel parandama neid ja mindi üle natukene loobilisema mikropeenuste partirektuurile pigem seliste metsiku mikropeenuste metsahagel oleks konkreetselt ütame mindist onne 9, 10, 16 rangel mikropeenuste tüüpi ja nende mikropeenuste sees võidid olla mingisugused alteratiivselt inklaratatsioonid, mingisugused replikaadid, aga et ei tegid seda alukorda, et on see mingi rangel mets. Pige mindi sellise lähenemise peal, et jagati nagu valgkondadeks, iga valgkonna sees võidid olla mõned alternatiivid, et kui meil on näiteks mingisugune payment mikropeenuste block, siis sellel alg aluele on vitu mikropeenuste, mis näedeks Google Pay paymentiga, Apple Pay paymentiga tegelevad või tegite kolmaldat aseme paymentiga tegelevad, aga nad propeerid nii oledi nagu selliseks. Et täpselt sama tüüp mikropeenuste, et see on nii, et neid pandid sama hapi, sama välin hapi, et siia võibolla kui ole tegid peest appiga, siis ei planne tassioonlada Eil peaks on on erinega väline, appi on taksed sama, et peestet mikropeenuste sallel payment appiga väljakord, siis meil on vältu ta, aga sisi meil poedat oledub erinega planne tassioonlid, erinega välista parteride oks. Ja siis tekis pigem hoomatav lähenemine või selle arvitetuur, et on pigem arvusad, et kui palju on erineva tüüpi mikropeenuseid ja kui te saad omavals uskidavad, mis on näide vahelesed standardi integratsioonid ja ei tekid enam seda olukord, et siin võib et siin võib olla 10 aperapiid, kui seda löölem, nad on erine ja rest upi näiteks, on see sellist. Ja enam ei pidanud sellist arhitektuuri oma ma. Kuigi see arhitektuur on palju keerukam, kui ta siin näed, kuna sa oled erinoalt, sellised ala mikro teinud, et see on oma ma erinoalt, kui erinoast jeles impenete eritus, siis vähed arhitektuuria ühelduste ja appide tasanel, appide standardüüte tasanel, on igeme, aga palju paremine omahtanud. Ja siis kui te rohkem võitab, et kui tähtsalt sa tegid ja võib-a leia te vitsi, kui ta sinna graafi rohkem sisse suumida, siis vaada ka jõu näid, viilt eestse. Aga mingil ajal jah, et need mikro teinud kasvuselt väga metsikuksed ka. Amazon Prime video ka mingi aasta või poolteste aasta pagasi, et nad lähevad mikro teinudsteist arhitektuurist samm tagasi ja kombineerilad teadud mikro teinudit tagasi kokku osalisteks monoliitideks. Ja nad on koopimeerida, kuid palju liiklust saavadakse nende mikro teinudste vahelselt. Olukorras tegelikult saavadakse kasvusel video, striime, pilte, frame, pilti frame, et siis tegelikult on parem vältida üle võrku suurde andne ka saavkust. Nema otsikades palju rahakoku selle, et natuke liigutasid arhitektuurit tagasi monoliitid suun. Aga järgimiseks räägime siis aine, teemaat ja kokku võtest. Räägime üles, et eelised ja puudused kõikin peamist aine teemaate kohta. Esimeseks olib siis hajusüsteemid. Hajusüsteemide eelisena võib kokku võtta niimoodi, et me ei pea enam koondama arvuntused arvuntused ühte sellises serverisse. Me ei pea ostma hästi kallid virtuaalmasinaid või habetseegest küsima. Tange meil on hiigesuud virtuaalmasina või server, kus on näiteks 2 terabyte nälu ja kus seda või 200 terabyte ketas näiteks ja 128 tuuma. Võib me saama arvuntused jagada sultsed lihtsasti hästi paljud arvutid teha lära. Meil on palju lihtsam halata neid rüistvarad. Kas te teate, kui me soovime ehitada pilves anmebasiserverid ja me ei saa hajusüsteem kasutada, et mis on maksimum virtuaalmasina suurud, mida saate asures tellida, kuid palju see maksma läheb. Ütleme, et me anmebasipuul meid huidam, et see ketta ruum, palju me saame failisüsteemis hoida anmebasifailet, et mis ja võiks see maksimum olla ühe virtuaalmasine kohta ja mista arvata, kuid palju see maksma oks kuud ninn. Kentaruumis Nii, ühega minda ikka ketta ruum, serverid roles maksimum keetan edasi kohta. perceptpay Se, ma renkkant kettaruumis, mitte, me hommal osates thirdskillam Friedcher Sam calling 30032 раскets H방as threatpiss Siin on murks ja tegev, koht sacked kora ka veid. Nüüd saaks tegelikult teha juba filebase põhise Anne base serveri, kus on 2 petabyte ruumi filebase Mälu jaaks muidlikk vähe Aga mis arvad, päris sa maksva kuus lähe? 160 000 Ja kusagi 260 000 kuus See on selled, et üks suuriamad serverid, mist vaatab 64 ketast Ja 400-800 CPU tuuma Ja ka mituterapeitimälu on 75 000 kuus Aga siis sa pead maksma kõik 64 ketajast Ja seal on 32-64 terapaitiselt pilveketat, mille kuutasu võib kolla kui 3000 eurokuus ühe ketakort Ja selle peale tuleb, et sa hakkad maksma miljoned eurasu aastas ühe virtuaalmasine Need on aga väga specialiseeritud virtuaalmasinad, et palju odabam võtta Palju väikse virtuaalmasine või konteinere ja oksletel arvud seal Sest siis ei pea kasutama kõike kallimad serveri ja kõik kallimad ristvora, mida pilvet ees pakku on investeerid Tee centraliseeritus on kaas, et me ei ole üstei pudelikaalad, mis üks virtuaalmas crashid Ja siis kõik läheb kätki, vaid meil võib olla üks 100 crashid On tähitse okei, et me kordame nii samu tegevõsi kusagli mõjal Resursside kasutus on ka lihtsam, et me saame jaotada erinevade ajustustemi komponentide, erinevade regioonide Vahele kasutatavad mõne regiooni lähedad, et saavad parema prahutuse Palju lihtsam kareeritavast, kui me saame komponente juulde panna Ja meil ei ole selled centraliseeritud kusagil Ja tõrkjekendus on ka parem, kui üks komponent, erite, kui me räägime replikate Ja siis üks replikat kätki läheb, siis teised replikates on jätkata päringute või operatsioonid Või andmetöötmase tegemist, et suudad jälle korra tegevõsi Ja kui üks näitas kätki läheb, siis teised tegutavad sest tähin üle Hilvega on kaasa tulnud virtuaaliseerimin, et me enam ei pida nii serverite Sotsa riistvara peale asju instaleerima Ja see võimaldas siis serverid tükkeleta väiksemat kütkideks Ja see tähendab, et kui me longisis kohe betavai nii ketta-rummiga server Et me kasutasid seda ainult ühe rakenduseaks Eriti ööselt, kui võib-lese rakenduseks väga palju jõudust ära kasutama Saaksime ta tükkeleta väiksemateks virtuaalmasineeteks Ja kasutada iga virtuaalmasineet erinema rakenduseaks Kasutatel, anda kasutatel virtuaalmasineet Kui me suuri arvutasid ei tee või kui me kogu ketta-rummile ära kasuta midagi Et me saame siis suuremat serverid jagata väiksemate tegevuste ja rakenduste jaoks ära Ja ühte serverse lihtsamid rohkemast pööma Virtualiseerime lihtsustas ka kesku andada kohantamist Et me saame teha virtuaalmasinete piltides koopeid Me saame jooksvasti virtuaalmasinest, mida üks administraatore on ettevalmistamud käsurea Kault on äiteks teha kõik koopeja liibutada kusagi mujale Et näiteks administraatore peab üks kort valmistama ette meile mingiseltse virtuaalmasina Kus on kõik väärgud asjad istal eritud Siis me teeme sellest snapshoti Ja tulevikust me saame sellest snapshoti uuesti kasutada Teeme sellest kistad koopeid, hästi tiiresti Et enam ei pea 10 korda sama tyüpi asja üles Ja ma vaid saame teha sellest üks kort koopeja Ja tuleks need koopeid põldu See on siis lihtsam kontainerit ja poolmõde teha Ja virtuaalmasinel on võimalta, et see on lihtsam Selle tõttud me saame seda koopeid teha Me saame ka liigutada nii koopeid kõngi mujale Et see live migrationid on pildlasti enam peadsa Et toadud väga hästi Et saate näiteks öel, et soovite virtuaalmasinels liigutad teist tüüpi ristvara peale Et näiteks rohkem mõnu saada Siis see nüüd tähadal on koivud taustal Nüüd peakse jooksavad virtuaalmasinels snapshot Liigutadaks snapshot ära Panaks seda teise pool tööle Siis panaks see eesjälge kinni Ja suunotakse liiklus ümber teise IP-aadressi peale Tead kasutada ei kõugigi väga mõdegi märgata Et kõikki läks Kuigi tüsti nii kusapone väikse põrkjad tegivad Ja kui saame liiklus ümber suunotatse Aga näiteks Ülikooli pilvest saate ka virtuaalmasinels Öelda, et ma saan taaks rohkem märu Ja siis tõetataks teise virtuaalmasinels Kõikki teise teise teha pärjade Ja ühtis, et kui me kasutame virtuaalmasinels Siis viis tõra lihtsam jälgides Me saame jälgide, nagu virtuaaliseerimist ase Ja väljas pool operatsioonisisteeme Saame näiteks ketta välja pahetada Ja kui me saame jälgide, nagu virtuaaliseerimist ase Ja me saame jälgides, nagu virtuaaliseerimist ase Ja väljas pool operatsioonisisteeme Saame näiteks ketta välja pahetada Ja me ei pia, nagu virtuaalmasinel Sees, midagi see läks muusma Virtuaalmasinel seese peasikid teha, et ketta Välja pahetada Serveri sijadistudist vältavõid, et see on äkki lihtsamad Ja me saame miselt tarkvara Väljas pool virtuaalmasine tuuandida Või virtuaalmasine enda välja pahetada Ja systeemides ka on väri Varu koop, et tegem lihtsa Ja me saame lihtsalt ketastes koopeid teha Ja pärast aastal virtuaalmasine tändest On suhtseb lihtne Virtuaaliseerimise puuduselt erite alguses oli see Et jõudlus või ishaalveneda Tänapäevase pilveteenuste Ja pilvetehnoloogia arenguga on palju paremaks läinud Et ka Riisvara toeta rohkem Virtuaaliseerimist Aga alguses oli ka tõesti Päris hullem, eriti võrgujühendus osas Et aastatel 2010 Olit Virtuaalmasineid kõvasti aegusemat Kui hotzerberis asi pülesseadmine Ja tänapäevase on vähem problemi Eres Rakendist käilitame Võib-kall masina seis meie suol aga aegusem Ja kuna pilvesele Iga selle evituk rakendiseaks Vaja oma operatsioonilisteem koop Kuna oli virtuaalmasine koop Mis tegelikult nende linuksid juoksutamine Iga virtuaalmasine lisees vajas lisas ressursse Lisa mälu, aina lisega operatsioonisisteemi Endata inuksid juoksutamiseks Et see vajas rohkem ressursse Kui otsaja viisvara peal rakendist Otsaja üleks jalgre Aga see et sa ei isoleerida turvalisemul Olik kindlasti täh samatulse Ressursjade kulu Ikkagi piljatenusei hakkadik asjad On väga massivik Virtuaaliseeris sulid natuke uue kogut Nüüd on mõnikud raskem Leida Kui kultaketletel on server, kus on Nelivirtuaalmasinat, igas virtuaalmasinas on Mingisuse viiruse, kontrol või ruutkitide Kontrol, aga ruutkitid on Väljaspor virtuaalmasine, et esis virtuaalmasinas Või peitetud virtuaalmasinana Ei saa virtuaalmasina Seestada üleks leida Aga samas väljaspor ruut kasutane juoksut Juoksad protsasid mõnikud saavad Ika virtuaalmasinassega sisse vaadata Või asi ümber konfiguririda nii et Peatud ovud on palju keerulisemad Üleks leida Tuleb teha kontrollev väljaspor Virtuaalmasineid, nii et See palju lisa vajasluseks ja Nende virtualiseeriks takvarele Et leida sellises ohud üleks Ah, sellega mis See oli, et ARM arendav Serveri Protsessorid, mis Ristivare tasavati virtuaalmasineid Et siis ei teki seda problemi Võibalmikile valmisid Auksele Siin oli näite tuleg, et ARM arendav Vist kiitamist rupteerivad virtuaalmasin Aga järjest rohkem on just Ikkaselt kiipid ema plaadil, mis näiteks Automaaltselt transleerivad Virtuaalmasineid te melu aadresse Üle füüslise melu aadresse Nii et CPU ei pea seda ena misja tegema Ja sellest oto Ename ei ole ne virtuaalmasineid jaajuse Kettaste Kontrolleerite takvarele Seesame eraldi järjekorrad Nii et me saame eraldi virtuaalmasinest tulevad Kettaste päringid pana eraldi Järjekordades, et saab olnud Kes hoonitseb, et kõik virtuaalmasineid Saaksid mingi aja, et Ketta-operasioone teha ei oleks Nii et see virtuaalmasin, mis kõige Rohkem ketta-operasioone teheb Et temal on kõige prioriteetid Et tema võtab kõik ketta-operasioone Üle kere rohkem Ristvara soetab igasugused Ja kindlasti Kulteerimine ja turvalisus On ka seal väga väga täh Konteeneritefektiisus Eriti virtuaalmasineid ka kõik Ei ole enam vaja eraldi Operatsioonisisteeme Kuigi kui teie Panete üles uue konteenereid Ja teed uue tokkerepildi Teele jääb võib-al mul jääb Esimene kiht on uu puntu kiht Või älbpain kiht, et see on ka linuks Aga tegelikult seal operatsioonisisteem See on ajutakun, et komplekt Nendest tarkvarast, käskudest Faillistest, mis tavast operatsioonisisteemid Aga operatsioonisisteeme Eendevpotsessid ei jookse virtuaalmasinest Rohkem konteenereid on võimalik Ühes servoise ostatuda võidast Kui virtuaalmasineid tegab Kuigi tehaks ikkagi virtuaalmasinat Millest ees konteenereid jooksetud Et see vihtsalt selletõttu, et isoleerida Erinevat keskkonat, aga rohkem ära Kui on üle teenust pakkada Kaks klenti Siis on palena, et isoleerida Sellet asem, et panna ka näid eraldi Võib taalmasel Tama konteenerid ei pandu otsi Ristora peale, võib ikkagi mingi virtuaalmasinest Lihtsam on teisardada Kuna meil on tilt sinna, et Konteenereid tead indikusti registris Teine serverad lihtsalt registris Sellal alatõmata, aga võimalik Ka jooksvast konteenereid teha tegelikult pilt Ja see ympärri liigutada Et meil peab See on võimselt üks Tokker komit käsks, et läks teha Jooksvast konteenereid pilt ja see ära liigutada Teha komit ja siis Finite liigutub Lihtsam on uuesti jää kasutada Sest Iga tegevise koks ta tegib uuskiht Ja võrrateest virtuaalmasinega Me ei pea terveelt et ta kooplet tegema Virtuaalmasinapuul Kogu ruud talas, kui kõik on kiga paiti koope teha Tokkeripuul viis, vaidam viimasest Viis koope teha, siis niimoodi liigutada Ei ülehet tõmata siit registrist alla Et Ja konteenereid ka ka Kõvasti väiksemat avasat kui Virtuaalmasinad Ja siirus on ka Parem nii, et puultimise ja puul Sest ei ole vaja operatsioonisisteemi Ilesseada ja jookstuda virtuaalmasina Iga virtuaalmasina sees Era operatsioonisisteemi, lait Konteenernis me kõik käelidaan protsisse kõik Konteenernite peamised Sellise puudused, mis võib-olla on Naltukana otsintult puudused mõnes mõtteselt Või kõik midagi väljutua Rast keman nagakõr täialiku eraudatavust Sest viis virtuaalmasinad Parem nii eraudatavad, täiesti teevad Eraldi mäluolad Tänapäevas on ka tovetetud ristvara pool paremini Aga kui meid on Konteenernis sees jookse protsess Kelle on ruud kasuta õigused Sest tal on lihtsam Oma konteeneste välja Hübata võidadus virtuaalmasineasid Sees jookseval protsessiga Ja Ikkagi nagu See on ka üks poohju, et miks virtuaalmasine Kas tõks sama aegselt, kui tõesti on Vajalikte eraudatavus Aga lihtjaga see problem, et Kui konteenere, et tokkedkonteenere On halvasti konfigureeritud Sinna panaks see näiteks mingisukuna Tarkvara, et logeda logifaile Aga sellasega, et logifailide Kaustamountida, mountiteks selle Rurkavus Konteenere sees jookse protsessab kõikidele Fileidele väljas pool konteenereid ligi Ja õbula pääse pisi konteeneri Sellele sokkedfailjile ligi Ja saab teisi konteenereid jooksata See on väga lihtsa teha vigaasid ja alpa Millist see on lõiguselt õnnekse saab seda paremile hallata Cooperneetises saab keelata Et kui konteenere on pantud App nimeruumi, siin sellele nimeruumi See ole mida ühelikida lubatud Rood kasutada jooksata Elle mida üheleki luba konteenereid Väljas poolt kaustamountida Saab reegid pealabanna politikat Ei ole lihtsalt ka lubatud Peatud tegel või hülte Mingis nimeruumi jooksast kohsene See on ikkagi hakka Me ei taha sellised pirangid pana neid systemi namespecies, ja siis kui kelle, kelle onnestub, systemi namespecies midagi oksutada, siis see peab õnnestub see, aga persiis on võimalik pool netipe peale vanna. Mõnikord sa ei aitta administraatorete vastud, kui on halva administraatore, siis tema ikkagi onnestub, millega kaidki teha, aga tihti on probleemid ka siht. Kuulude kätte, et teil on asutusteltud kontinuusitekessal pipeline, mis võtab kitist kuberneetese manifestivs ja paneb serveris üle. Nüüd kudeste kaidselt selle vastu, et kit ei pane nii-kid imelik manifestivis, annab liiga palju õiguseb ja jooksutab niremiseid oheks jooksutada tähje serveris. Ja tegid sellist asju väga rasv kaidsta ja puhtal selletõttel teha efektiivselt tarkvaralendust lubataks sellised asju, et siis on väga rasvi kontrollida, et kellel on õigus, kiti möötsjuda mingisusust manifesti, kus mingid vead on sees, ja kes teaksab korralikult kontrolli nende üle, et kas sinna on paljud mingi root kasutaja õiguseb kuski konteineri, docker, beatfile ja need asjad. Et virtuaalmasinade pool on natuke parem kaidsta, kuna virtuaalmasina sees, midagi halba juhtub asi tihti ei saa virtuaalmasinast välja murda, aga konteinerid õiguseb päris hästi välja murda, sest konteinerid võimalda võimalda, võimalda on võimalda, võimalda on väga palju konkrubüreerida auke asjada konteineris issa. Päri näete, see manifesti tegel on võimalik, see on automaatt kontroleri? Jah, on võimalik. On võimalik panna, kui päri näete, see siis isse eradi kontrolleri. Näiteks on security operatore ja security kontrolleri, mis kontrolli jõuad iga uue manifesti üle. Ja nad kontrollid seda enne, kui Kubernetes, kes reasad neid poodil oma hakkam. Ja siis seal on siis kannikus, mitte kannikuga, ma unustin numera. Ja neid saad lihtsalt üld, et see ei ole korrekt manifest, kuna seal on lubatud uut kasutaja. Ja selline tarkvareks existeerib. Meil on üks Kubernetes aineemise, ma kistlikin tude, et peale mõelda, et sügisel, aga seal on jääb turvalisus aspektu üle. Kubernetes on võimalik sisse plug-inina panna päris väljasju. Ja tõesti on võimalik, kistad ka security policy defineerida, et mis on lubatud, mis ei ole lubatud. Ja on ka scannerid, mis canniivad iga imidžid, enne kui seda lubatakse kasutada. Ja vaatavad, et kas seal mingiselt vulnerability on. Et näiteks, kas seda tocker imidžid on ilmselt lubatud Kubernetes rasutus lõpeta. Ja et saavad tõesti vaatata tockerfailid ja näit layerikid läbi, et mis kasutad sees on. Ja vaatavad, et mis versioon on. Et näiteks, ei luba openSSL vanaversiooni. Et teab ole muu versioni, sest peerorid ei õnestud seda märgist lua. Kuna imidžis, mida kasutatakse, on liiga vanavaks versiooniks, kui sa on mõni pärne aukri. Et selles mõttes Kubernetes on hea, et seal saad peale väga västi teha. Aga sa administraatorid teavad, kuidas selle teha on eraltikusim. Ja see võib ka tegelikult, nagu sellise Kubernetes platformid suht keerukad teha. Mõnikult on lihtsalt keerukam arusaad, et mis kontainerid jooksevad, et see on vajalikud, et see on eba vajalikud, kas said reaasukavad, et see keegi on jooks määtnud. Nii indiselt Kubernetes poodid, aga on unnustavad maha võtta, kui pärast uurda ja siin on lihas mängid. Kui neid on sadu ja sadukontainerid jooksevad kuskil serverides ja klastrideses, kas administraatorid ja operaatorid saavad hea ülevaad, et mis on tegelikult vaja, mida peaks maalitma, mõnikult on arusaad, et kõik on vajalikud. Ja kas dokumentatsioon hästi kirjatev seda, mis tegelikult jooksma peaks. Ja arusaad, et mis on mõtetud, et meil on mõtepeaks emadada. Eriti kui neid mikro teemastakult tohukult palju, aga seda Uber näite puhud. Kus oli üks näite, kus kui Elon võttis üle flitteri, siis ta hakkas asju kindi panema. Ja üks asja, mis juhtus, oli võeti maha mingisugune teenus, mida ei teatud, mida ta teed mingi mikro teenus. Aga see mikro teenus oli selleks, et sealt kaudu frontendis oli mingi jahvaskri päring, mis selle mikro teenus kaudu midagi päris. Ja kunase mikro teenuse emadati, siis hakkas juhtuma see, et kõikides kasutete brouseritest hakkati tegema selle mikro teenuse aaldres vastu päringud, et kas saab jõhendada, kas saab jõhendada, kas saab jõhendada. Kogu flitteraks maha. Kõik kasutavad, kõikide kasutavad brouserid hakkasid teha alas sõrjistat akki printid tegema Twitteri vastu, et saad siit ohultud palju pümmekorta sekundud rohkem päringud Twitteri serveritesse, et kas see mikro teenus on olnud, sa mitte ja siis kogu sisteemi oksis mingiks saad koku, kui nõpuks laeti üles uus versioon sellest frontendijahvaskriptis, mis lõpetas näide päringud tegemiseks. Oli selleks huvikud valutatud. Ma täpselt ei mäletu, mis see mikro teenus oli, aga just see, kasutavad isegi hakkasid pommiktama seda serverit, kuna mingi mikro teenud enam ei tõna. Kupernetese on mind suurlade dokumentatsioonist nadel kogudud, et kuidas William Keeley selle kusmetsust ei tegud. Mõnesmõttes ei olegi, mõnesmõttes ongi, kupernetes iseheitad, niimoodi, et sellest manistestid on suurlast hästi loetavad, aga jah, et kuidas neid vädas kool kupernetese hästi dokumenteerida, ma pole kindes edas osas. Selles mõttes on palju parem, et virtuaalmasineid on kuhu sa pead scannima, et kui sa pead virtuaalmasineid, mis on sees, on kupernetse kuhu sa lihtsalt palju manistestid ja saavad aru, et see on võib. Kuidas nii, et kui saada manifesti ja agad sellest kukkit üldpi, ja aru saada neile asme? Visualiseerijad on tarkvarad, mis nagu neid kruppeeviivad, visualiseerijad värviivad manatalu, peabid idesa sulle, et parem üles oda. On tarkvarad, mis näitad, mis komponeidi millega suhtevad, et sa vaadad, et mulle on hapid. Ühtegi suhtlus viimase kolme tunni on suht, sellest hapid see ei ole. Seda sa näed, sest nagu dokumentatsioonid asjad, et sa tahad teada, mis on konteinersees, on pigem jahe manifestid, et sa oled tugele. Sa oled huvitatud millesti. Sa ei tea, mille ma seda sa aga sisse vaadad, et sa saaks manifesti tugele paruseta, mis on sees. Osa asi on peidetud, tockerfailide, konteinerse sisse, aga ka see on, et kõik layerid on tegelikult käsnud. Käskust saab lugelda, et nad ei ole mustatud. Black boxid sa ei näe, sa saad minna lugelda, et mis käskust, et mingisugune layer lua ja kogu tokeri, filo tegeliklu loeta. Kuigi sa ei tea pitkas, sest näiteks on veelis kooperitud mini ghost, sest seda kausta ei näe, et sellest mõttes kripti päris ei ole nähta, et tihti ikkagi midagi kooperiteks ja kuihtam fain kooperiteks, siis sa taakse liikud vaatama, et sa on kriptam fain ASMR-a. Aga ma olen kirjalis, et mis on tehtud, et see konteeril lua. Ta on suudseltaluu analüüsta, kas just inimesepot loetavaga. Kõik fäelik, et see on mõnna põttes olemas. Mikro-teelist ja kasutamiseeliselt on võimalde, et rakendustiseist pideva tarengutad võimalikult kiiresti muudatuse läbi viia ja miks see on hea, et muudatus on väiksta. Mida kiiremene saavud muudatused läbi viia, arendada, testida, testkeskkonnast käib itral testida ja production keskkonda panna, seda väiksemaid muudatused saavad olla. Väiksemate muudatuste pool on võimalik paremne mõõta, on võimalik paremne alusada, mis mõju nendel on rakendistile ja teistele mikro-teelistelel, mida väiksemad komponeerid ja väiksemad muudatuse tead, siis ta ette endustada onne, mis on näid muudatust mõjut. Kui võtame nädal aega midagi arendada ja pool nädalat testida, siis kahe nädal jaoks on väga palju asju muujal ka muutunud, teistele muodulitele, teistele takvara osades ja siis on väga raske, kas ju väga raske, ma ennustada, mis juhtub, kui ma selle uuenduse üles. Ja saab see pidevat pooltatavast, pidevat testistavast ja saavad kiiresti juurduvata neid muudatused. Kasutatavad kiireni tagasel ja saadad, kes muudatuste muu juhu on, tegitab nii terroveid või ei meeldi kasutatavad, et siis ei raiska kahte nädalat arendust, sa läks aru saab, et see midagi ei tööta või midagi on valasti tehtud, märkab ka igasete ja muidaks ja kiireni. Mikro-teelistel pool saab teha igalat teenuseb isu või väiksema, ta on niimoodi, et ta lihtna aru saada näite suuntele töötaned, et saab anda praktikondil ühe mikro-teenuse tuuri, kuidas see töötab, ja arenda seda paremaks või tee alternatiiv erlangis, püt võtab püütle mikro-teelistese erlangis ümber, et kui neid mikro-teelist on väikse, see on lihtsam teha, ja kasutajui või arenda ei pea hooma, et mis on kõik, see on neide mikro-teelist ümber olevad asjad, et saab neid tükk haval niipad arendada ja võib-olla arendad ei pea ki, olema ekspert kogusisteemile vaid, nad on eksperteid mingi väikse tükki osa üle, ja kui neid on täiesti eraldi jooksvad asjad, siis ka oma läpakas on neid istama ülesseada, et ei proovita kogu Uberi lahendust oma läpakade ülesseada palju raske. Arenduskeskandades ei käi importi üli suuri projekte, nüüd on projekti näiteks mingilt big data mapped, juss või Hadu projekti oma e-klippsi või Intelligensio importide, siis sa võtab sulle peale pool hünda aeg, et ikkas asjad sinna haladamada näidenis, ja siis tegid kärra, et kuna väga palju teile on mingi suurluseb, native library siit tule kaasa, et mis talad ära kui tõrge. Et siis monolitik projekti on kõikki väga terograal. Teele, et isa alustad jooksvus Kiinalini, et viib võta nii pala aega, kuigi terve, Mikro, teel, et see on kui selle rakke, et nii on ülesseadnud ja ta aegas olla, kui näid on hästi palju väikse tükke, mis talad üks järjel ülesseada, plus üks tükku ootab, kui ne andakas on üle, et enne, kui teid on ülespanaks, sellised sõttuvud võib ka aegis ota. Parem, mis ala eritas, nii kõrral, et kui mingisugud SMS-i saadnud selle teedus, kik otevus kaktki on, ja me ei kasvud otsa orkestreerimist, vaid nagu koregroofi ja lähenevist, siis meil on täits okei, et me teeme kasvuda ära ja poole tunnikast, kui teedus tagas üles tuleb, siis saadakse SMS. Aga otsas, et midagi kasvud näite loomineleks kakki ei lähe, meil see teatud asjad on natuke te leid, hiljemu tainuad, aga üle, et saad jätkata töötamist. Teatud kohad võib-alt olla pudelik aelad, et meil peab olema kasvuda teed loomis ja mikropeerust töötas, selleks, et SMS-i saakse saada, kuna me ei saa muidu sõnmust, et kasvuda loodud, aga aga sellisele eritavad, et kui midagi kaktinad, siis üle, asjad üle, et teeduseb lihti võibad jätkata töötamist, aga siis lihti olev selle, et see rakendab mõneselt see vähel näite teanoloogia võlga, kui teanoloogia võlg puudutab ainult ühte komponenti näites, et me tegime mingisuse mikropeerusem püütalist vanasti aeglene, tuleb, et juba tuleks vaetada ümber arendada näite kerlangi peale, ja kui me seda otsud, et teeme, et arendama ta teise keele peale ümber, siis see ei ole niisult võlg, kui me saame teda teha kas ühe mikropeerust tasemel või mikropeerust tasemel tükk haval, et me ei pea võtma kuuda aeg, et mikropeerust ümber kirutada teise keele peale, ja siis nad alles töölepanna, et kui me saame seda tükk haval teha lihtsam, vähempea tehnoloogilis võlga, ja kui ta mõjutab väiksemaid obekte ja väiksemaid teenuseid, siis onneks on olnud üksikult võrad väiksemaid. Tehnoloogi võlg on see, et kui meil on vajalik midagi uuendada, aga meil ei ole veel aeg, et saa või raha selle teha ja lükka mõne tulevikku, et mingiselt muudab, et see näiteks synkroontse, suhtsele tasumkroontse peale mene või püüten asemel erlaendu kattuda, midegis elid, et me paneme selle endale kirja, et me taaksime seda tulevikust teha, aga me ei vee seda ei see, et siis annad võlg, et me plaanime seda tulevikust teha ja meil on lihtsalt kent, tahab menegi tähtsalt funksionaasust ja me peame selle enne ära arjada, nagu ei võta nigi backlogist asjumi, et on selline backlog või võlg, et mida tulevikust võid seda siin teha või vajalik, aga mida ma koha ei ole teha, lükkan selle kulaid. Ja see võimalik, et siis eriline tehnoloogid kasutavad saama ühele mikrotenuside panna, Poskas anda baasi teisele, Eskul anda baasi kolmandele, mingiselt teist tehnoloogid kasutada. Mõnes kasutada erlaendu ja mõnes kasutada püütenid, et vastavad vajadusele või soovitele saama ja kasutada tehnoloogid. See on mõneselt sohtlik, et kui mingiselt teingsop valitad, et me teeme püütenis, aga tegelikult püütenis ei olegi iga päran teha, võib-kui oleks jää, ikkagi standaardsed panna, et see on võib-kui kõik, kes mikrotenus on sikkagi kasutavad sama keelt, et siis saavad teised tiimid asju ülevõtta, uue töötad, ei pea erlaendu õppima, et midagi tegema hakkab ta. Et selles mõttes, et need tehnoloogia valikud, kui neid teha liht väga suualisest, meid võib-kui oleikus tehnolooga võlge suurendada, aga see võimalus on olemas, et saame kasutada need annebasi, mis saab iga oktimaasama teadad tipi tegevast jaaks. Tähtis meil on JSON dokumented afeksivine, siis saame JSON annebasi kasutada, aga me tahame teha JSON annebasi peal väga keerukaid join ja aggregatsioonipäringud, siis väng tohi JSON annebasi kasutada, kuna tegil saan halvaad viitsinud anned aggregeriumseks ja analyysimiseks, need siis peab saada keskulisne annebasi kõik pärutuma või mingit nõuespele annebasi, mis võimaldeb siis aggregatsioonidega, et saab valida kõige sodiva ma tehnoloogid vastavalt mikroteeasioon vääbasel. Eliti siis, kui iga üksik mikroteeasioon on oma annebasi. Puhutuses mikroteeastapuul, meid ka tänab ka etsime, et mõnikõttel on raskem aru saada kogu suuresta arkitektuurist või komponente on palju nagu uuperjubugul näite solid. Vaja tegeleda teenostumalise sulktusega, nende võib-olla kriteerilise kaitsimisega, võib-olla ka mõõdbise, kui efektiivse on ja testimisega. Kui meil on üks mikroteeasio, me ei saa ennud seda mikroteeast üksite testida, me peame ka integratsiooniteste tegema. Pärinud, mis vajavad, mitme mikroteease järjestiku väljakutsumist või nende agriteerilis, et on tihti palju keeruisemad, et me ei saa, me peame väljakutsuma teise mikroteeanisega ja nende tulemusid parsime, siis järguse mikroteeanisega väljakutsuma ja peame halda, mingi pigased, mis tekivad, et näiteks, kui üks mikroteeanise vasta, kovame ootame, kovame kordame neid pärinud, võib-olla päris keeruliseks muutida, sest palju mikroteeaniseid hõlmavad tegevused. Kogusüsteeli võib olla aegas juurutuda, kui need palju tükka, mida ta pülesseadma, ja kogusüsteeli testimine ja silumine tifakumine on kirkal. Te pealt ei üles leidma, et kui kasutasad pea, kus, millises mikroteeanise, millises mikroteeanise replikasse, miga teha reaest tekis, nii et tihti ongi nagu põhimiseks, raskem tifakumine ja selleks on parem kasutaselist kesksed logide kogu ja logide halde analisaatoreid ja tresimus ka, et oleks lihtsam üles teht, et kui üks kasutas on pea, et siin näiteks kasuta annab teile oma päringu idee, ja te saate mingisse keskuse logise, mis süsteemi selle päringu idee sissepanna ja kui te saaksid kõik logik, kõikides mikroteeaniseid ühtekohtakoku ja võib-olla visualiseerida üle aega, et see on lihtsam üles teht, et kus need asuvad, aga selleks kistid tulla parem, aga platsaam sellised, et reissimine on ühtse võimalik, et see on see. Ja võib-olla ka suurem resursside kasutus, kui meil on hästi pole väikse komponente monoridide aseemalt, siis tegelikult haiusalt me taame igal, et ikkagi teelduse on ikkagi mingisuguse mõistliku maksimum mälu ja CPU aja ja muut limitiid andad, kui nad hüpavad nad üles poole, et siis nad ikkagi saaks oma asja tehtud, kui mingi kasutus läheb plakke, siis me tihti ikkagi anname kõigile näitele natuke lisamälu, lisavajadus ja kui seda hakkakeeb teha kogu systemiga, siis põled monolidiga, et resursside kasutus olla palju suurem kui monolidiga puhul. Ja teetud olukord, et sa võiatki monolidiselt hakkamist et olla efektiivsemat, eritoosu olukorras, kui on vaja kasutada jääbki aga mälu või selumeid saata tihti ikkagi teelest puhul, sest sellise lokaause võrku haadat, et päringutte tegemine või üldse päringutte tegemine üle võrku põredas, sellega, et me loomem äluskundi väärpusi on alati aeguse. Seda on tihti vajalik skaleerise jaoks, kui meil on 10 miljardid kasutajaks, me ei saa monolidid väga hästi kasutada, aga üksid päringuist jääbkultu aegusem olla ja monolidid puhul võib-olla, et saaks me ühele kasutada kiiresti vastata, aga kui me kasutame hajusot lähenemist, siis need päringutte ikuvad mikrotenuste vahel ja kõik see võrku 11. paegi, et meil on mingislused minimum latensus, mida meil ruudi saada saavutada, et reale sisteemit, mis peavad kohe vasta milisekundte jooksul, need võib-olla mikrotenuste ei kasutada, et selle tõttu, et see ei võimalda kiiresti kohe vastata päringuttele. Pilve toist rakenduste eliselt on võimalda võimalda või paremini sellise teenuse resursse teli ja te juurdu reaal ajas. Kui me loomem, et neid prakotype, siis käime ikka tavaselt sellist esialtsed ette maksud kuuduvad, et me saame näist asure app service kasutavad tasuta, kuni meil ei ole liiga palju kasutajad ja kui meid ei huvit, et meil ei jääb mikrotenuste, et jooksmaga öösel, et see jooksad siis, kui on päringud ja see on päringud ei ole, prototipid arengusest me saame teha nustsevts kasutasju ja ette maksud ka kuuduvad. Sellesmõttel, et kui meil kasutajad ei ole, maksama kuul lõpus, et kui me saame kasutatemnuda ja nad kasutama hakkavad, siis me saama kuul lõpus arve, aga me ei tea nagu ette ostma või ette maksma asja veest serverite ostmiseks. Kist on lihtsam, kui me kea ise serverite ülessead, ma ise installeerin takvara serverite pealt, ma ei saame lasta asure lissalt konteneerid ostmada või ettevannustat virtuaalmasse toostuda, et see võib olla lihtsam asja ülessead, et saame asule lööda, võtge minu püüstal takvara minu kitist ja pange üles ja kui meist mingit iga agend, siis enam on tööd. Aga eks te näete ka praktiku, mis olete näinud, et tisti tegimalt mingi peaks, kui kasutad ja siis teie näidid kordas. Palju kohadadud pilme teenuseid on eriti Amazonis. Existeerib näiteks teenus, mis teie roboti namipeeer, mis takvara jaoks kõneid erid robotid jaoks kolmde ruumid ja kõneid näid üks tuhad random ruumi ja siis lased teie takvare seal ruumis namigeerida, ja nende teg robotid mitmes ruumiist uhandas, see on nõnestus või mis ta keskkumist aega võiks jellistad. Või väga imelik teenuseid, mis existerivad. Näiteks teha selle antenus, et te saate panna oma video streami ja lased aga joost treenida, millised on objektid, mis liiniga liiguvad ja siis see ise õppi ära tuvastama mingit objekte, mis näevad väga testugust välja tavalistas objektele, keskkumistest. Võib-olla mõned selle teenuseid, mis existerivad, mida saad kandutada. Ja järjest hakkam, mida see juurde. Kuna aga ammu käisin, olid konverensid, kus Amazoni web servises pille arenda käis ja räägis, ja näende lähenemine pille teenuste implementeerimisele on see, et kui tuleb üks käring kletidelt, et tavad mingi pille teenust, mis teevad seda isse pere. Ja siis vaatavad, kuid palju seda kasutab hakkala. Kasi teda ei olnud, jah, teed keetavad selle alasi ja rohk meedas ja arvan. Ja see oligi näende lähenemine, neil oli palju raha, ta tatsik populariseerid oma pillida ja nad said arendalise tööle panna ja see ei ole suur kuru. Nii tegid lisabe eruselt ja sellel tõlt on Amazoni sadu ja sadu unikaalskime teenud. Ja saab juurutada lihtsalt teenuste kasutad lähemala läbi näende Content-Delivered Networkid või APES platformed, et meil on suudselt lihtne Eestis uua rakendus ja panna see näiteks sualisest pilve keskuses üles, kus meie kasutad on lähemal, kus me saame uue klendi ja me ei pea minema kuske linnu. Ja see on kõik, et meid on kõik, et meid on kõik, et meid on kõik, joo leют seen on vaid sobre viimale pootselday. needing ja viimailendsiliimine on koonditusi jıyorpr difícilinat Natus Man daha pl Hope mind sulti korraska. Võin, et ca sõummalt tegavad defects ja toohideid nägemustid neid Bitover전 soon. Sa talletanan,ombideid on meil linnus Gramfunelilipanõbr Kemком pracaviida turtle ja palju ei saa seda muud. Amasöönis on rohkem valikud erinevate virtuaalmasinadtypid üle, et seal saab maksata hästi kalli, täst võimsad servoilis Ristvara eest. Amasöönis saab ka tellida, et ma saav soovin terved Ristvara kasutada, et ühegi teise kasutavad virtuaalmasinadid ei taviselt joosta, kes ma lihtsalt maksame rohkem. Aga see võib suhtsalt kalliks minna ja meil ei ole jahe nüüd nii palju kontrolli Ristvara enda üle. Ja kulusid võib olla väga raske hinata, kui me jahsutame virtuaalmasinad, me võib olla teame. Kui meil on püme virtuaalmasinad, jahsutame aastat, saab palju see maksma läheb, aga kui ma hakkame mingil nanofuksioone kasutama, siis see maksme sõltub kasutad arvust. Aga üks kõik, mis pilved eenuese puhul sõltub tihki hind sellest, ka palju almeid allatõmatakse, et te peate maksma iga teravai teest, mis pilvest allatõmatakse teie klientide puhul. Ja kas te teate, ette, palju see järgine kuul on üleärgine kuul? Palju see maksma läheb, kui te näele servisot teie rakenteid vastaväeht? Palju see maksma? Niiht ja raske endostada, mis need pinnaad võib olla. Ja ammeta konstituatsiootiseks kaalt on see lihtsalt kaaguna, teile ei ole kontrolli selle üle. Ütleb te näiteks, te juhude tullub kasutada, ütleb, et kustaga kõik minu onmed ära. Teie lähete ütleb, et Amazon, kustaga kaust ära S3. Kas sest kaustas on vägapusega? Kas te teate, kas on? Teinilisest te võibolla teile kiisab sellest ütlet, et Amazon, et kustaga kõik selle kasutada anded ära või kustaga kõik see kaust ära. Ja siis on Amazoni vastutuda, et kas nad anded on kustatud mitte. Aga teie poolt väga ei ole võimalik lihti asi kontrolli, või kas mingi back-upid on kustatud, kas kusakile existeeriat midi fileid. Ja suure arvu arendate kasutate puul on tildiga probleem see, et te arvate õigus, et Amazonis midagi teha. Ja tegata päris keerurilne andatäpselt õigusid, et meil on lubata ainult peatud asjipeha. Sest see juurdepeasupoliitikete haldamine on sellik ülikranulaarne, et seal on väga väikselt võimalik andamigi õigusi. Aga siis hea ei ole kontrollid, aga sa ansite nelle õiget õigusid, mist kõik on pahelik, mingid mikrodades ülesseada. Või siis vastupid, et te jahna teie iigavale õigusid, et nad saavad mingi pipp toamaseid ja võimavad jooks oda pitkoine. Nii tead, milliks sellist. Et itki ongi raske kontrollida, mis kasutatavad, kui palju õigusid on, aga seal on piisavad õigusid või nii ka palju õigusid. Ja mis juutub, kui kele, kui on õnestud pääsalt teha adutuse pilna kontole ja panna mingi pitkoin mainaj, et sa tead öelda. Vajal see teil maksma läheb. õnneks Amazonis ja näidid skiratud, et maksimum 100 metallmasineid või võimalik jooks oda. Kui teid, kusin nendega, et see juutub, sa oda tõnahtama ka. Kes jälgib seda, et see on mirekõi valesti tehtavid? Valesti asi jookne jäädalt. Aga viimane teema on siis Exami korraldus. Exami leht või selline näite Exami küsimused on koduläel olemas, et saate ka sealt vaadata. Exam toimub siin samal ajal. See ei ruugi alu samas ruumi. Nii et esimene Exam on 122. Ja teine Exama 144. Et ruumid on teised. Aga nad toimub sellel loend vajal. On siis kakve nendalapärast ja kolme nendalapärast. Ja te peata palju nendest pärast. Ja järeleksim on ainult nendele, kes ei tulnud varasemal Examine või ei saa üle 50%i kokku ennest. Nendegenele on pea 50%i praktik, mis juba koos. Teid on üks punkt, et Examid kogudani. Et teie aaks ei ole väga tähtis. Aga järeleksimid ei saa ka hinnet paranduda. Kui te saad hinte e-kätte näiteks, siis enam järeleksimid ei saa tulla et eet paranduda. See on kõikides aine, kes saad saada vaadata. Ja see on siis 12. aega. Need, kes teid lopputöid piisad mõlemast ajast. Ja teid, kes teid lopputöid, ma saan ka näiteks 5. juunid nende Examid ülevaadata, kes hakkadud aates 16. kaitsma. See jääb tegelikult 500 aegi, et 7. ja 8. lõputöid kaitsda. Väga kiire, ei pea nagu kiirustama koha. Eksame siin ära tegema, kui te soovide lõputöid kaitsda. Tegelikult sooviste teine aegi. Piisad võib-oad ei saa 6. juunid kaitsda oma lõputöid. No tahavad, mis 42 tundi enne aegi sindaseed. Examid kvalifiseerimiseks peab olema esitatust 80%i praktikumi lahendustest. See ei tähende 80%i punktidest. Aga me samase ei loe 0. Kui te esitatud tühja sippi või vale praktikumi lahenduse, siis saata 0 punkti ja sellise lihtsalt ei piisaa. Peab olema mindi punktid kogutud, et minna kirjas ja 80%i peale. Aega esitatud tohjumused, kuni eksame algus, me võtame ikka vastuga hilineid asju, et ei tegikse olukord, et hilineid seledada tegsamal ei saa. Aine hilnad kaponetist, et jagame pooleks. Võib-oad ei saa. Praktikumi lahendust analogist 50%i aines ja eksamana 50%i aines. Tulemuste leht, kaks näitama seda, et kui te olete mingi punktid praktikumid saanud, et kui paljuta sellest 50%ist on, et see punktide ja praktikumio argute korrutiseid alati ei lähe 50 näks täpselt kordani. Ja teeme sellest skaleerins, et meil ei tead 4 teist praktikumist. Meil ei tead 4 teist praktikumi, annad siis 140 punkti kokku või 12 praktikumi 10 punkti, annad 120 punkti kokku ja 120 punkti skaleerid 50%iks, et üle 50%i tuleb eksam. Ja aines lägimesest peab siis üle 50%i kokku kogume võib. Ja teed, et saada. Eksamireeglid on kirjalik paperi eksam, et ei toonu muudlis. See on sellest ammatud raamatud eksam, aga selle arvutult, et telefon ei tohi raskema. Et selle muundatuse ma tegin see aasta, peene aasta juba hakkas probleeme tekkima, et kik hakkas kasutama chatjppid. Ja ma osates, et ei see Soomi teha seda eksamid nii palju raskemaks, et nendele, kes chatjppid kasutaksid oleks raskem, nii et ma pigem install keel on sulle arvutult teile telefonide kasutamise, siis ei pea eksamite tohutu raskemaks tegema. Ja mind pigem huvitavati rohkem, kui hästi te ainate teemadast aru saate, mitte seda, et kes te oskate mingis kusid keerukkai, loogika probleemi lahendada peas või chatjppi teega. Ja ma ka ei ju pealasundida, et võib chatjppi teega, aga ma pigem heevaks sulle arvutult te kasutamise. Aga te võite kasutaka märgmai raamatud, prindistud materjalne, et kas slideid välja prindida või pigem ärge nagu tohutud palju slide välja prindiga, tapate liikavalt puid, aga te võite ka luge tuudis, et palju chatjppid nii puid tapab nii, et võib-al meie lahendada on isegi parem. Aga ja, et pigem teist kendal mingid märgmäd ja valige slideid, mida te välja prindida, et ärge niis tohutud palju välja prindiga, aga kui te võtad läheb nii raamatud, te teete oma märgmäd ja võite näid materjalega omavalj agada, et näidiks keegi valmistab ette mingid märgmade, siis teine prindid ka endajaks välja, aga ei tohi nagu töö ajal omavahe suhelda või kosta teha, aga ja selline paperi materjalid on okei. Keskus on 90 minutit, nii et ei ole pikk exam ja on kolm exami küsimust, et kusti 30 minutit, eksam küsimust kohta, 90 küsimust, sellest senaariumi põhis, et nad ei ole nagu faktiküsimust, et neid peab jääb asjub meelde jätma, te võite küsida minu, kas mida tähendab, mingisugune term, loend vajal, et ei mäleta, mida tähendab midagi term, ja ma võin teile selgitada terminoloog, et ma midagi, mida te ei mäleta, te võiti sellised küsimust küsida, et ei pia asju pähe õppima. Aga kui te soovite, tege meelde, et tehtek meeltnud endale. Siis kodu lähele on siis kolm küsimuse näikete, jo ühel teksamilt, siin on üks näite, kus te peate ised senaariumi väldi mõtlama, üks näite, kus teile abbeksed senaarium ja siis sellest senaariumi pakka kaks viimud. Siin on viimust selle ennest senaariumi pakka. Esimene näite on siis, et hajussüsteemide mikrodemist põhjelsta rakendust, et saanimisel on võimalik kasutada erinev liisene hajussüsteemide komponentide vahelise suhtlustse ente mittelemised. Siin on küsimust, et millist tüübi suhtlust võiks sellest senaariumist kasutada, aga põhjeliselt te peate ise mõtlama välja kirjeltama ühted senaariumid, kus te ei ei hidankonele soovima, ma ei ehekkiisem kasutada komponitide vahel otsasutluse, et te teed mõrreelest jäädete jäärekordade kasutad. Ja mingid senaarium, kus tegelikult oleks otsasemme synkroone suhtlus hattu PRS-jaadil efektiisev või sopivam, kui jäädete jäärekorras, kus sõlumid panasi jäärekordeid, siis neid jäävad sinna ootpele, kui keegi ei tugematse. Ja te peate siis kirjeltama ühted senaariumid ja siis natukööne lisama argument, et miks teie hinan, kui rest on parem kui teedat jäärekordad. Ja küsimus võib olla ka vastuvidi, et miks teedat jäärekordad on parem kui rest. Ja see küsimus eeltab, et ta ise oskat, et senaariumid välja valida. Ma olen neid küst seda tüüpi küsimesi vähem kasutanud, kui järgmest näedad, kus ma ised senaariumi panen. Ja et ma teen sellised küsimus, kus ma isepakun meile senaariumid, kus ta ise ei pea senaariumid välja mõtlama. Aga see oleks siis üks näile. Teistelt kaks küsimust on sellel senaariumi kohta. Siin pakkusin välja välja senaariumi. Teid palka vidu firma, mille eesmärk on välja töötada ja käivitada tarkvana, mis võimaldab kasutatel üles laadida videoses. Selleks, et välja otsida videodest erinev tseene, milles leidub kasutajende nägu. Et näiteks keegi üles video, mingisest ürit just, et soovide enastalt välja leida. Siin tuu firma saavib aeltas tuua pilve, kui siin teedus näed kasutat, saavad svedi kaudu oma video üles laadida. Ja nende jaoks on tähtis voidu kulusid kokku alguses prototip eetemis ajal. Aga samas on soov, et hakkandis oleks võimalne hiljem skaleerima kiiresti, kui järsku mingi üritbis ajal näiteks. Toimub Eesti laulubidu ja siis kõik kasutatakad kohast ja kasutamad enastalt leida. Et siis võib pole korraga västi võidu video, et saad võiteks üles pohjapäära stil laulubidu. Siin on kaks eest küsimust ja need jälle puudutavad nende ainate temaid. See on teine küsimuse, millist kõipi anmebaasid ja kasutusel võtaksid. Kas resaltioonist võitivärdust, dokumentipõist või veegude perekonna. Mis oleks kõige mõistlikum, selleks, et vajustada sellist videos, kui teid trakere, mis sa olema saan loodud pitte. Neist te peate arutlema, mis on nende erinate lähennemiste elistile puudused. Ja tõhjendama, miks just see teie poolt valitud lähennemist on parem ku alternatiivid ja võrteva vähem tühe alternatiivida. Siin vastusa võib pole liiga lihtne, et kus teika videosed hoiaksid aga, nagu ohjelmist sellised küsimused tuleb. Teine küsimus täpsatesame selle samal senaarivi kohta on, kas te soovitakse kasutada virtaalmasinaid või konteinereid sellist rakennistakomponentid ülesjaadmiseks. Ja siis ka sellest senaarivi kontekstis arutlega oma valikud ja kasutavad eeliselt puutuseid, nii pohjad, et miks just te valitatakas selle või selle ja mis on probleemid selle teise ära lähennemist kape. Ja kui on sellist küsimused, siis te peate arutlame sellest senaarivi kontekstis ja mitte nii nagu üldisalt, et virtaalmasinad on paremad mingis teises kontekstis ei ole õige vastus, et te täksete just pareman. Just teid videode haltuse, piltide haltuse, kulutekoku hoitmise, skaleeridis konteksti, et see on siis keegi tähetsam. Ja tähendastud see eksami tuleb minu pohjaliselt senaarivimid ja sellist küsimused, kas tuleb, et teid tuleb arutleda siis nended senaarivimid kontekstis, millised valikud on paremad või halvemad ja kaata maidu teemasid, mis on loohendudest kaed või mida te oled praaktiikimeist proovid. Siin on küsimus, kuidas on poonuspunktid ja kas need annavad läveendi ja ma ei ole väga range olnud, et kui tudeend, kes kogu poonus üles sanate tõttu 51 punkt ja tõesti väga ei taha eksamid tulla on Eestist väljas, et siis ainuke range kriteerim on see, et te peate olema eksamele rekistreerunud, et ma saaks hinde sisse panna ja kui te saate eksamid 0, siis ma ei hakkanud, ma et te peate eksamid vähemalt midi puhju koguma, et saab teoreetustid isegi ilma eksamid ka kesika ei etahav. Aga jah, et lähevad, kuna lähevad on ainult praaktikumi laenduste esitamine, siis selles mõttes ega ta väga ma, kui seda 28 % ei põjutu, kuna ta ikkagi ühe praaktikumi sisuna see poonus selles sanat. Aga tõesti, et kui on mingi olukord, et jääda aigeks ja tõesti ei saa kuuaegu ühelki eksamide tulla, siis saab ka 51 punktiga läbi nii, et eksamele ei tulnud. Kuidas punktid rakenduvad? Teie võib-ole ei näe, et hinnate lähte hästi, kui te saate praaktikumi eest 10 punkti, hinnate lähte, siis poonusülesanat annad plus 2 sinna juurda. Aga midegi selistindama, võib-olla oleks pidanud esimese loon, kui see on rohkem ette tooma, aga jah, see poonusülesanat annad natuke poonuspunkti juurde, aga neid väga palju ainate see oledma ka viimases praaktikumi tein, jah, poonusülesat juurde, hea natsutada seal ei olnud, aga väga palju ta ei teie indete ei parandas, sest neid on kuskil 45 tükki, kui kui kus tükki komputervaine peale, neid tootub palju jälle. Kes kelle ka näeme küsimest? Et nad samad näite, et senaarimide küsimest on siis kodul ära kolmas, saate vaadata ja võite siis suulipik autu küsida, kui teil vees tekivad küsimest X-a, nii kohta näiteks, mis materjale tohi kasutada, aga tohjumust kõikki printitud materjale tohi kasutada, aga siis ärge suure kärugas ja tulga mõistliku arvu kõik. Meil ka oli eena aasta, kus me lubasime ainees süljaharvudid kasutada ja siis üks tuden kirutas terve eksami süljaharvudist, kes sääkis palju jõutusel ja chatboti. Aga selleks siis ongi kõik, et mind rohkemast ei näe, kuna see nädal uut teemat ka praktikumise alavets ma vasta saalt läbi kõmmi, nii et edu teile ja loodan, et saanja liide ea kus huvitab ja eks võtbalu näeme kuski teiste saanjatas tulevikus. Oda, et saanjal kasutada. Ah, eksame kõna, teie fietad. Aga lõpetame siis tänakse ära, kui rohkemist ei ole. Tänan!